# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from open_payments.api_client import ApiClient


class AccountInformationServiceAISApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_account_list(self, x_request_id, x_bic_fi, consent_id, **kwargs):  # noqa: E501
        """Get Account List  # noqa: E501

        Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_list(x_request_id, x_bic_fi, consent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param ConsentId consent_id: This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation.  (required)
        :param bool with_balance: If contained, this function reads the list of accessible payment accounts including the booking balance,  if granted by the PSU in the related consent and available by the ASPSP.  This parameter might be ignored by the ASPSP.  
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: AccountList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_list_with_http_info(x_request_id, x_bic_fi, consent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_list_with_http_info(x_request_id, x_bic_fi, consent_id, **kwargs)  # noqa: E501
            return data

    def get_account_list_with_http_info(self, x_request_id, x_bic_fi, consent_id, **kwargs):  # noqa: E501
        """Get Account List  # noqa: E501

        Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_list_with_http_info(x_request_id, x_bic_fi, consent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param ConsentId consent_id: This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation.  (required)
        :param bool with_balance: If contained, this function reads the list of accessible payment accounts including the booking balance,  if granted by the PSU in the related consent and available by the ASPSP.  This parameter might be ignored by the ASPSP.  
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: AccountList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'x_bic_fi', 'consent_id', 'with_balance', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'psu_ip_port', 'psu_accept', 'tpp_redirect_preferred', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location', 'psu_corporate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_account_list`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `get_account_list`")  # noqa: E501
        # verify the required parameter 'consent_id' is set
        if ('consent_id' not in params or
                params['consent_id'] is None):
            raise ValueError("Missing the required parameter `consent_id` when calling `get_account_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'with_balance' in params:
            query_params.append(('withBalance', params['with_balance']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location', 'psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/accountinformation/v1/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_balances(self, account_id, x_request_id, x_bic_fi, consent_id, **kwargs):  # noqa: E501
        """Get Balances  # noqa: E501

        Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_balances(account_id, x_request_id, x_bic_fi, consent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountId account_id: This identification is denoting the addressed account.  The account-id is retrieved by using a \"Read Account List\" call.  The account-id is the \"id\" attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent.  (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param ConsentId consent_id: This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation.  (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: ReadAccountBalanceResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_balances_with_http_info(account_id, x_request_id, x_bic_fi, consent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_balances_with_http_info(account_id, x_request_id, x_bic_fi, consent_id, **kwargs)  # noqa: E501
            return data

    def get_balances_with_http_info(self, account_id, x_request_id, x_bic_fi, consent_id, **kwargs):  # noqa: E501
        """Get Balances  # noqa: E501

        Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_balances_with_http_info(account_id, x_request_id, x_bic_fi, consent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountId account_id: This identification is denoting the addressed account.  The account-id is retrieved by using a \"Read Account List\" call.  The account-id is the \"id\" attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent.  (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param ConsentId consent_id: This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation.  (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: ReadAccountBalanceResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'x_request_id', 'x_bic_fi', 'consent_id', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'psu_ip_port', 'tpp_redirect_preferred', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location', 'psu_corporate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_balances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_balances`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_balances`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `get_balances`")  # noqa: E501
        # verify the required parameter 'consent_id' is set
        if ('consent_id' not in params or
                params['consent_id'] is None):
            raise ValueError("Missing the required parameter `consent_id` when calling `get_balances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location', 'psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/accountinformation/v1/accounts/{account-id}/balances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReadAccountBalanceResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction_details(self, account_id, transaction_id, x_request_id, x_bic_fi, consent_id, **kwargs):  # noqa: E501
        """Get Transaction Details  # noqa: E501

        Reads transaction details from a given transaction addressed by \"transactionId\" on a given account addressed by \"account-id\".  This call is only available on transactions as reported in a JSON format.  **Remark:** Please note that the PATH might be already given in detail by the corresponding entry of the response of the  \"Read Transaction List\" call within the _links subfield.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_details(account_id, transaction_id, x_request_id, x_bic_fi, consent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountId account_id: This identification is denoting the addressed account.  The account-id is retrieved by using a \"Read Account List\" call.  The account-id is the \"id\" attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent.  (required)
        :param TransactionId transaction_id: This identification is given by the attribute transactionId of the corresponding entry of a transaction list.  (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param ConsentId consent_id: This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation.  (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: TransactionDetailsWithTppMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transaction_details_with_http_info(account_id, transaction_id, x_request_id, x_bic_fi, consent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_details_with_http_info(account_id, transaction_id, x_request_id, x_bic_fi, consent_id, **kwargs)  # noqa: E501
            return data

    def get_transaction_details_with_http_info(self, account_id, transaction_id, x_request_id, x_bic_fi, consent_id, **kwargs):  # noqa: E501
        """Get Transaction Details  # noqa: E501

        Reads transaction details from a given transaction addressed by \"transactionId\" on a given account addressed by \"account-id\".  This call is only available on transactions as reported in a JSON format.  **Remark:** Please note that the PATH might be already given in detail by the corresponding entry of the response of the  \"Read Transaction List\" call within the _links subfield.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_details_with_http_info(account_id, transaction_id, x_request_id, x_bic_fi, consent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountId account_id: This identification is denoting the addressed account.  The account-id is retrieved by using a \"Read Account List\" call.  The account-id is the \"id\" attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent.  (required)
        :param TransactionId transaction_id: This identification is given by the attribute transactionId of the corresponding entry of a transaction list.  (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param ConsentId consent_id: This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation.  (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: TransactionDetailsWithTppMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'transaction_id', 'x_request_id', 'x_bic_fi', 'consent_id', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'psu_ip_port', 'tpp_redirect_preferred', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location', 'psu_corporate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_transaction_details`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `get_transaction_details`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_transaction_details`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `get_transaction_details`")  # noqa: E501
        # verify the required parameter 'consent_id' is set
        if ('consent_id' not in params or
                params['consent_id'] is None):
            raise ValueError("Missing the required parameter `consent_id` when calling `get_transaction_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location', 'psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/accountinformation/v1/accounts/{account-id}/transactions/{transactionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionDetailsWithTppMessages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction_list(self, account_id, booking_status, x_request_id, x_bic_fi, consent_id, **kwargs):  # noqa: E501
        """Get Transaction List  # noqa: E501

        Read transaction reports or transaction lists of a given account ddressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_list(account_id, booking_status, x_request_id, x_bic_fi, consent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountId account_id: This identification is denoting the addressed account.  The account-id is retrieved by using a \"Read Account List\" call.  The account-id is the \"id\" attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent.  (required)
        :param str booking_status: Permitted codes are    * \"booked\",   * \"pending\" and    * \"both\" \"booked\" shall be supported by the ASPSP. To support the \"pending\" and \"both\" feature is optional for the ASPSP,  Error code if not supported in the online banking frontend  (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param ConsentId consent_id: This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation.  (required)
        :param date date_from: Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.   For pending transactions, the relevant date is the entry date, which may not be transparent  neither in this API nor other channels of the ASPSP. 
        :param date date_to: End date (inclusive the data dateTo) of the transaction list, default is \"now\" if not given.   Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.   For pending transactions, the relevant date is the entry date, which may not be transparent  neither in this API nor other channels of the ASPSP. 
        :param str entry_reference_from: This data attribute is indicating that the AISP is in favour to get all transactions after  the transaction with identification entryReferenceFrom alternatively to the above defined period.  This is a implementation of a delta access.  If this data element is contained, the entries \"dateFrom\" and \"dateTo\" might be ignored by the ASPSP  if a delta report is supported.  Optional if supported by API provider. 
        :param bool delta_list: This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report. This delta indicator might be rejected by the ASPSP if this function is not supported. Optional if supported by API provider
        :param bool with_balance: If contained, this function reads the list of accessible payment accounts including the booking balance,  if granted by the PSU in the related consent and available by the ASPSP.  This parameter might be ignored by the ASPSP.  
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: TransactionsResponse200Json
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transaction_list_with_http_info(account_id, booking_status, x_request_id, x_bic_fi, consent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_list_with_http_info(account_id, booking_status, x_request_id, x_bic_fi, consent_id, **kwargs)  # noqa: E501
            return data

    def get_transaction_list_with_http_info(self, account_id, booking_status, x_request_id, x_bic_fi, consent_id, **kwargs):  # noqa: E501
        """Get Transaction List  # noqa: E501

        Read transaction reports or transaction lists of a given account ddressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_list_with_http_info(account_id, booking_status, x_request_id, x_bic_fi, consent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountId account_id: This identification is denoting the addressed account.  The account-id is retrieved by using a \"Read Account List\" call.  The account-id is the \"id\" attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent.  (required)
        :param str booking_status: Permitted codes are    * \"booked\",   * \"pending\" and    * \"both\" \"booked\" shall be supported by the ASPSP. To support the \"pending\" and \"both\" feature is optional for the ASPSP,  Error code if not supported in the online banking frontend  (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param ConsentId consent_id: This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation.  (required)
        :param date date_from: Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.   For pending transactions, the relevant date is the entry date, which may not be transparent  neither in this API nor other channels of the ASPSP. 
        :param date date_to: End date (inclusive the data dateTo) of the transaction list, default is \"now\" if not given.   Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.   For pending transactions, the relevant date is the entry date, which may not be transparent  neither in this API nor other channels of the ASPSP. 
        :param str entry_reference_from: This data attribute is indicating that the AISP is in favour to get all transactions after  the transaction with identification entryReferenceFrom alternatively to the above defined period.  This is a implementation of a delta access.  If this data element is contained, the entries \"dateFrom\" and \"dateTo\" might be ignored by the ASPSP  if a delta report is supported.  Optional if supported by API provider. 
        :param bool delta_list: This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report. This delta indicator might be rejected by the ASPSP if this function is not supported. Optional if supported by API provider
        :param bool with_balance: If contained, this function reads the list of accessible payment accounts including the booking balance,  if granted by the PSU in the related consent and available by the ASPSP.  This parameter might be ignored by the ASPSP.  
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: TransactionsResponse200Json
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'booking_status', 'x_request_id', 'x_bic_fi', 'consent_id', 'date_from', 'date_to', 'entry_reference_from', 'delta_list', 'with_balance', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'psu_ip_port', 'tpp_redirect_preferred', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location', 'psu_corporate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_transaction_list`")  # noqa: E501
        # verify the required parameter 'booking_status' is set
        if ('booking_status' not in params or
                params['booking_status'] is None):
            raise ValueError("Missing the required parameter `booking_status` when calling `get_transaction_list`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_transaction_list`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `get_transaction_list`")  # noqa: E501
        # verify the required parameter 'consent_id' is set
        if ('consent_id' not in params or
                params['consent_id'] is None):
            raise ValueError("Missing the required parameter `consent_id` when calling `get_transaction_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501
        if 'entry_reference_from' in params:
            query_params.append(('entryReferenceFrom', params['entry_reference_from']))  # noqa: E501
        if 'booking_status' in params:
            query_params.append(('bookingStatus', params['booking_status']))  # noqa: E501
        if 'delta_list' in params:
            query_params.append(('deltaList', params['delta_list']))  # noqa: E501
        if 'with_balance' in params:
            query_params.append(('withBalance', params['with_balance']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location', 'psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'application/text', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/accountinformation/v1/accounts/{account-id}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionsResponse200Json',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_account_details(self, account_id, x_request_id, x_bic_fi, consent_id, **kwargs):  # noqa: E501
        """Get Account Details  # noqa: E501

        Reads details about an account, with balances where required.  It is assumed that a consent of the PSU to  this access is already given and stored on the ASPSP system.  The addressed details of this account depends then on the stored consent addressed by consentId,  respectively the OAuth2 access token.  **NOTE:** The account-id can represent a multicurrency account.  In this case the currency code is set to \"XXX\".  Give detailed information about the addressed account.  Give detailed information about the addressed account together with balance information   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_account_details(account_id, x_request_id, x_bic_fi, consent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountId account_id: This identification is denoting the addressed account.  The account-id is retrieved by using a \"Read Account List\" call.  The account-id is the \"id\" attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent.  (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param ConsentId consent_id: This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation.  (required)
        :param bool with_balance: If contained, this function reads the list of accessible payment accounts including the booking balance,  if granted by the PSU in the related consent and available by the ASPSP.  This parameter might be ignored by the ASPSP.  
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: AccountDetailsWithTppMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_account_details_with_http_info(account_id, x_request_id, x_bic_fi, consent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_account_details_with_http_info(account_id, x_request_id, x_bic_fi, consent_id, **kwargs)  # noqa: E501
            return data

    def read_account_details_with_http_info(self, account_id, x_request_id, x_bic_fi, consent_id, **kwargs):  # noqa: E501
        """Get Account Details  # noqa: E501

        Reads details about an account, with balances where required.  It is assumed that a consent of the PSU to  this access is already given and stored on the ASPSP system.  The addressed details of this account depends then on the stored consent addressed by consentId,  respectively the OAuth2 access token.  **NOTE:** The account-id can represent a multicurrency account.  In this case the currency code is set to \"XXX\".  Give detailed information about the addressed account.  Give detailed information about the addressed account together with balance information   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_account_details_with_http_info(account_id, x_request_id, x_bic_fi, consent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountId account_id: This identification is denoting the addressed account.  The account-id is retrieved by using a \"Read Account List\" call.  The account-id is the \"id\" attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent.  (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param ConsentId consent_id: This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation.  (required)
        :param bool with_balance: If contained, this function reads the list of accessible payment accounts including the booking balance,  if granted by the PSU in the related consent and available by the ASPSP.  This parameter might be ignored by the ASPSP.  
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: AccountDetailsWithTppMessages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'x_request_id', 'x_bic_fi', 'consent_id', 'with_balance', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'psu_ip_port', 'tpp_redirect_preferred', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location', 'psu_corporate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_account_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `read_account_details`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `read_account_details`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `read_account_details`")  # noqa: E501
        # verify the required parameter 'consent_id' is set
        if ('consent_id' not in params or
                params['consent_id'] is None):
            raise ValueError("Missing the required parameter `consent_id` when calling `read_account_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']  # noqa: E501

        query_params = []
        if 'with_balance' in params:
            query_params.append(('withBalance', params['with_balance']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location', 'psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/accountinformation/v1/accounts/{account-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountDetailsWithTppMessages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
