# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from open_payments.api_client import ApiClient


class ASPSPInformationServiceASPSPISApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_aspsp_details(self, bic_fi, x_request_id, **kwargs):  # noqa: E501
        """Get ASPSP Details  # noqa: E501

        Gets details about an ASPSP by ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aspsp_details(bic_fi, x_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bic_fi: The BICFI of the ASPSP  (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :return: Aspsp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aspsp_details_with_http_info(bic_fi, x_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aspsp_details_with_http_info(bic_fi, x_request_id, **kwargs)  # noqa: E501
            return data

    def get_aspsp_details_with_http_info(self, bic_fi, x_request_id, **kwargs):  # noqa: E501
        """Get ASPSP Details  # noqa: E501

        Gets details about an ASPSP by ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aspsp_details_with_http_info(bic_fi, x_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bic_fi: The BICFI of the ASPSP  (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :return: Aspsp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bic_fi', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aspsp_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bic_fi' is set
        if ('bic_fi' not in params or
                params['bic_fi'] is None):
            raise ValueError("Missing the required parameter `bic_fi` when calling `get_aspsp_details`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_aspsp_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bic_fi' in params:
            path_params['bicFi'] = params['bic_fi']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/aspspinformation/v2/aspsps/{bicFi}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Aspsp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aspsp_list(self, x_request_id, **kwargs):  # noqa: E501
        """Get ASPSP List  # noqa: E501

        Gets all ASPSPs currently supported in the Open Banking Platform.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aspsp_list(x_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param IsoCountryCodes iso_country_codes: ISO Country Codes for the countries to get ASPSPs for 
        :param CityIds city_ids: City IDs for the countries to get ASPSPs for 
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :return: AspspList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aspsp_list_with_http_info(x_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aspsp_list_with_http_info(x_request_id, **kwargs)  # noqa: E501
            return data

    def get_aspsp_list_with_http_info(self, x_request_id, **kwargs):  # noqa: E501
        """Get ASPSP List  # noqa: E501

        Gets all ASPSPs currently supported in the Open Banking Platform.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aspsp_list_with_http_info(x_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param IsoCountryCodes iso_country_codes: ISO Country Codes for the countries to get ASPSPs for 
        :param CityIds city_ids: City IDs for the countries to get ASPSPs for 
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :return: AspspList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'iso_country_codes', 'city_ids', 'digest', 'signature', 'tpp_signature_certificate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aspsp_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_aspsp_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'iso_country_codes' in params:
            query_params.append(('isoCountryCodes', params['iso_country_codes']))  # noqa: E501
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/aspspinformation/v2/aspsps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AspspList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_city_details(self, city_id, x_request_id, **kwargs):  # noqa: E501
        """Get City Details  # noqa: E501

        Gets a city by ID   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_city_details(city_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str city_id: The ID of the city  (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :return: City
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_city_details_with_http_info(city_id, x_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_city_details_with_http_info(city_id, x_request_id, **kwargs)  # noqa: E501
            return data

    def get_city_details_with_http_info(self, city_id, x_request_id, **kwargs):  # noqa: E501
        """Get City Details  # noqa: E501

        Gets a city by ID   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_city_details_with_http_info(city_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str city_id: The ID of the city  (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :return: City
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['city_id', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_city_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'city_id' is set
        if ('city_id' not in params or
                params['city_id'] is None):
            raise ValueError("Missing the required parameter `city_id` when calling `get_city_details`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_city_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'city_id' in params:
            path_params['city-id'] = params['city_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/aspspinformation/v2/cities/{city-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='City',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_city_list(self, x_request_id, **kwargs):  # noqa: E501
        """Get City List  # noqa: E501

        Gets all cities currently supported in the Open Banking Platform.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_city_list(x_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param IsoCountryCodes iso_country_codes: ISO Country Codes for the countries to get ASPSPs for 
        :param CityIds city_ids: City IDs for the countries to get ASPSPs for 
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :return: CityList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_city_list_with_http_info(x_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_city_list_with_http_info(x_request_id, **kwargs)  # noqa: E501
            return data

    def get_city_list_with_http_info(self, x_request_id, **kwargs):  # noqa: E501
        """Get City List  # noqa: E501

        Gets all cities currently supported in the Open Banking Platform.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_city_list_with_http_info(x_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param IsoCountryCodes iso_country_codes: ISO Country Codes for the countries to get ASPSPs for 
        :param CityIds city_ids: City IDs for the countries to get ASPSPs for 
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :return: CityList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'iso_country_codes', 'city_ids', 'digest', 'signature', 'tpp_signature_certificate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_city_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_city_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'iso_country_codes' in params:
            query_params.append(('isoCountryCodes', params['iso_country_codes']))  # noqa: E501
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/aspspinformation/v2/cities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CityList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_countries_list(self, x_request_id, **kwargs):  # noqa: E501
        """Get Country List  # noqa: E501

        Gets all countries currently supported in the Open Banking Platform.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_countries_list(x_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param IsoCountryCodes iso_country_codes: ISO Country Codes for the countries to get ASPSPs for 
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :return: CountryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_countries_list_with_http_info(x_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_countries_list_with_http_info(x_request_id, **kwargs)  # noqa: E501
            return data

    def get_countries_list_with_http_info(self, x_request_id, **kwargs):  # noqa: E501
        """Get Country List  # noqa: E501

        Gets all countries currently supported in the Open Banking Platform.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_countries_list_with_http_info(x_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param IsoCountryCodes iso_country_codes: ISO Country Codes for the countries to get ASPSPs for 
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :return: CountryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'iso_country_codes', 'digest', 'signature', 'tpp_signature_certificate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_countries_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_countries_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'iso_country_codes' in params:
            query_params.append(('isoCountryCodes', params['iso_country_codes']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/aspspinformation/v2/countries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountryList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_country_details(self, iso_country_code, x_request_id, **kwargs):  # noqa: E501
        """Get Country Details  # noqa: E501

        Gets a country by ISO Country Code   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_country_details(iso_country_code, x_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iso_country_code: ISO Country Code for the country  (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :return: City
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_country_details_with_http_info(iso_country_code, x_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_country_details_with_http_info(iso_country_code, x_request_id, **kwargs)  # noqa: E501
            return data

    def get_country_details_with_http_info(self, iso_country_code, x_request_id, **kwargs):  # noqa: E501
        """Get Country Details  # noqa: E501

        Gets a country by ISO Country Code   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_country_details_with_http_info(iso_country_code, x_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iso_country_code: ISO Country Code for the country  (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :return: City
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['iso_country_code', 'x_request_id', 'digest', 'signature', 'tpp_signature_certificate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_country_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'iso_country_code' is set
        if ('iso_country_code' not in params or
                params['iso_country_code'] is None):
            raise ValueError("Missing the required parameter `iso_country_code` when calling `get_country_details`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_country_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'iso_country_code' in params:
            path_params['isoCountryCode'] = params['iso_country_code']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/aspspinformation/v2/countries/{isoCountryCode}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='City',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
