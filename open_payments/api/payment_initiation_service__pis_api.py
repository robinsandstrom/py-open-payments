# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from open_payments.api_client import ApiClient


class PaymentInitiationServicePISApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_payment(self, payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Cancel Payment Initiation  # noqa: E501

        This method initiates the cancellation of a payment.  Depending on the payment-service, the payment-product and the ASPSP's implementation,  this TPP call might be sufficient to cancel a payment.  If an authorisation of the payment cancellation is mandated by the ASPSP,  a corresponding hyperlink will be contained in the response message.  Cancels the addressed payment with resource identification paymentId if applicable to the payment-service, payment-product and received in product related timelines (e.g. before end of business day for scheduled payments of the last business day before the scheduled execution day).   The response to this DELETE command will tell the TPP whether the    * access method was rejected   * access method was successful, or   * access method is generally applicable, but further authorisation processes are needed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_payment(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: PaymentInitiationCancelResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_payment_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_payment_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
            return data

    def cancel_payment_with_http_info(self, payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Cancel Payment Initiation  # noqa: E501

        This method initiates the cancellation of a payment.  Depending on the payment-service, the payment-product and the ASPSP's implementation,  this TPP call might be sufficient to cancel a payment.  If an authorisation of the payment cancellation is mandated by the ASPSP,  a corresponding hyperlink will be contained in the response message.  Cancels the addressed payment with resource identification paymentId if applicable to the payment-service, payment-product and received in product related timelines (e.g. before end of business day for scheduled payments of the last business day before the scheduled execution day).   The response to this DELETE command will tell the TPP whether the    * access method was rejected   * access method was successful, or   * access method is generally applicable, but further authorisation processes are needed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_payment_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: PaymentInitiationCancelResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', 'x_request_id', 'x_bic_fi', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'psu_ip_port', 'tpp_redirect_preferred', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if ('payment_service' not in params or
                params['payment_service'] is None):
            raise ValueError("Missing the required parameter `payment_service` when calling `cancel_payment`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if ('payment_product' not in params or
                params['payment_product'] is None):
            raise ValueError("Missing the required parameter `payment_product` when calling `cancel_payment`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `cancel_payment`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `cancel_payment`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `cancel_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/paymentinitiation/v2/{payment-service}/{payment-product}/{paymentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentInitiationCancelResponse202',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_cancellation_sca_status(self, payment_service, payment_product, payment_id, cancellation_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Get Payment Initiation Cancellation Authorisation SCA Status  # noqa: E501

        This method returns the SCA status of a payment initiation's authorisation sub-resource.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_cancellation_sca_status(payment_service, payment_product, payment_id, cancellation_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param CancellationId cancellation_id: Identification for cancellation resource. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: ScaStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_cancellation_sca_status_with_http_info(payment_service, payment_product, payment_id, cancellation_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_cancellation_sca_status_with_http_info(payment_service, payment_product, payment_id, cancellation_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
            return data

    def get_payment_cancellation_sca_status_with_http_info(self, payment_service, payment_product, payment_id, cancellation_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Get Payment Initiation Cancellation Authorisation SCA Status  # noqa: E501

        This method returns the SCA status of a payment initiation's authorisation sub-resource.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_cancellation_sca_status_with_http_info(payment_service, payment_product, payment_id, cancellation_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param CancellationId cancellation_id: Identification for cancellation resource. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: ScaStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', 'cancellation_id', 'x_request_id', 'x_bic_fi', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'psu_ip_port', 'tpp_redirect_preferred', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_cancellation_sca_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if ('payment_service' not in params or
                params['payment_service'] is None):
            raise ValueError("Missing the required parameter `payment_service` when calling `get_payment_cancellation_sca_status`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if ('payment_product' not in params or
                params['payment_product'] is None):
            raise ValueError("Missing the required parameter `payment_product` when calling `get_payment_cancellation_sca_status`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `get_payment_cancellation_sca_status`")  # noqa: E501
        # verify the required parameter 'cancellation_id' is set
        if ('cancellation_id' not in params or
                params['cancellation_id'] is None):
            raise ValueError("Missing the required parameter `cancellation_id` when calling `get_payment_cancellation_sca_status`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_payment_cancellation_sca_status`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `get_payment_cancellation_sca_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501
        if 'cancellation_id' in params:
            path_params['cancellationId'] = params['cancellation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/paymentinitiation/v2/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations/{cancellationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScaStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_information(self, payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Get Payment Initiation  # noqa: E501

        Returns the content of a payment object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_information(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_information_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_information_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
            return data

    def get_payment_information_with_http_info(self, payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Get Payment Initiation  # noqa: E501

        Returns the content of a payment object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_information_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', 'x_request_id', 'x_bic_fi', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'psu_ip_port', 'tpp_redirect_preferred', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if ('payment_service' not in params or
                params['payment_service'] is None):
            raise ValueError("Missing the required parameter `payment_service` when calling `get_payment_information`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if ('payment_product' not in params or
                params['payment_product'] is None):
            raise ValueError("Missing the required parameter `payment_product` when calling `get_payment_information`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `get_payment_information`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_payment_information`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `get_payment_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'multipart/form-data', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/paymentinitiation/v2/{payment-service}/{payment-product}/{paymentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_initiation_authorisation(self, payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Get Payment Initiation Authorisation Sub-Resources  # noqa: E501

        Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_initiation_authorisation(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: Authorisations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_initiation_authorisation_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_initiation_authorisation_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
            return data

    def get_payment_initiation_authorisation_with_http_info(self, payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Get Payment Initiation Authorisation Sub-Resources  # noqa: E501

        Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_initiation_authorisation_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: Authorisations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', 'x_request_id', 'x_bic_fi', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'psu_ip_port', 'tpp_redirect_preferred', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_initiation_authorisation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if ('payment_service' not in params or
                params['payment_service'] is None):
            raise ValueError("Missing the required parameter `payment_service` when calling `get_payment_initiation_authorisation`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if ('payment_product' not in params or
                params['payment_product'] is None):
            raise ValueError("Missing the required parameter `payment_product` when calling `get_payment_initiation_authorisation`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `get_payment_initiation_authorisation`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_payment_initiation_authorisation`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `get_payment_initiation_authorisation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/paymentinitiation/v2/{payment-service}/{payment-product}/{paymentId}/authorisations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Authorisations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_initiation_cancellation_authorisation_information(self, payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Get Payment Initiation Cancellation Authorisation Sub-Resources  # noqa: E501

        Retrieve a list of all created cancellation authorisation sub-resources.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_initiation_cancellation_authorisation_information(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: CancellationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_initiation_cancellation_authorisation_information_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_initiation_cancellation_authorisation_information_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
            return data

    def get_payment_initiation_cancellation_authorisation_information_with_http_info(self, payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Get Payment Initiation Cancellation Authorisation Sub-Resources  # noqa: E501

        Retrieve a list of all created cancellation authorisation sub-resources.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_initiation_cancellation_authorisation_information_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: CancellationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', 'x_request_id', 'x_bic_fi', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'psu_ip_port', 'tpp_redirect_preferred', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_initiation_cancellation_authorisation_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if ('payment_service' not in params or
                params['payment_service'] is None):
            raise ValueError("Missing the required parameter `payment_service` when calling `get_payment_initiation_cancellation_authorisation_information`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if ('payment_product' not in params or
                params['payment_product'] is None):
            raise ValueError("Missing the required parameter `payment_product` when calling `get_payment_initiation_cancellation_authorisation_information`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `get_payment_initiation_cancellation_authorisation_information`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_payment_initiation_cancellation_authorisation_information`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `get_payment_initiation_cancellation_authorisation_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/paymentinitiation/v2/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CancellationList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_initiation_sca_status(self, payment_service, payment_product, payment_id, authorisation_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Get Payment Initiation Authorisation SCA Status  # noqa: E501

        This method returns the SCA status of a payment initiation's authorisation sub-resource.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_initiation_sca_status(payment_service, payment_product, payment_id, authorisation_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param AuthorisationId authorisation_id: Resource identification of the related SCA. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: ScaStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_initiation_sca_status_with_http_info(payment_service, payment_product, payment_id, authorisation_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_initiation_sca_status_with_http_info(payment_service, payment_product, payment_id, authorisation_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
            return data

    def get_payment_initiation_sca_status_with_http_info(self, payment_service, payment_product, payment_id, authorisation_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Get Payment Initiation Authorisation SCA Status  # noqa: E501

        This method returns the SCA status of a payment initiation's authorisation sub-resource.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_initiation_sca_status_with_http_info(payment_service, payment_product, payment_id, authorisation_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param AuthorisationId authorisation_id: Resource identification of the related SCA. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: ScaStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', 'authorisation_id', 'x_request_id', 'x_bic_fi', 'digest', 'signature', 'tpp_signature_certificate', 'tpp_redirect_preferred', 'psu_ip_address', 'psu_ip_port', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_initiation_sca_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if ('payment_service' not in params or
                params['payment_service'] is None):
            raise ValueError("Missing the required parameter `payment_service` when calling `get_payment_initiation_sca_status`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if ('payment_product' not in params or
                params['payment_product'] is None):
            raise ValueError("Missing the required parameter `payment_product` when calling `get_payment_initiation_sca_status`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `get_payment_initiation_sca_status`")  # noqa: E501
        # verify the required parameter 'authorisation_id' is set
        if ('authorisation_id' not in params or
                params['authorisation_id'] is None):
            raise ValueError("Missing the required parameter `authorisation_id` when calling `get_payment_initiation_sca_status`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_payment_initiation_sca_status`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `get_payment_initiation_sca_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501
        if 'authorisation_id' in params:
            path_params['authorisationId'] = params['authorisation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/paymentinitiation/v2/{payment-service}/{payment-product}/{paymentId}/authorisations/{authorisationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScaStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_initiation_status(self, payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Get Payment Initiation Status  # noqa: E501

        Check the transaction status of a payment initiation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_initiation_status(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: PaymentInitiationStatusResponse200Json
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_initiation_status_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_initiation_status_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
            return data

    def get_payment_initiation_status_with_http_info(self, payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Get Payment Initiation Status  # noqa: E501

        Check the transaction status of a payment initiation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_initiation_status_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: PaymentInitiationStatusResponse200Json
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', 'x_request_id', 'x_bic_fi', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'psu_ip_port', 'tpp_redirect_preferred', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_initiation_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if ('payment_service' not in params or
                params['payment_service'] is None):
            raise ValueError("Missing the required parameter `payment_service` when calling `get_payment_initiation_status`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if ('payment_product' not in params or
                params['payment_product'] is None):
            raise ValueError("Missing the required parameter `payment_product` when calling `get_payment_initiation_status`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `get_payment_initiation_status`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `get_payment_initiation_status`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `get_payment_initiation_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/paymentinitiation/v2/{payment-service}/{payment-product}/{paymentId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentInitiationStatusResponse200Json',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def initiate_payment(self, body, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, **kwargs):  # noqa: E501
        """Create Payment Initiation  # noqa: E501

        This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***domestic***     - ***international***     - ***swedish-giro***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_payment(body, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: JSON request body for a payment inition request message 

There are the following payment-products supported:
  * "sepa-credit-transfers" with JSON-Body
  * "domestic" with JSON-Body
  * "international" with JSON-Body
  * "swedish-giro" with JSON-Body
  
There are the following payment-services supported:
  * "payments"
  * "periodic-payments"
  * "bulk-paments"

All optional, conditional and predefined but not yet used fields are defined.
 (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (required)
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param str x_affiliated_aspsp_id: The ID of an affiliated ASPSP as related to the X-BicFi header 
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP's documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. 
        :param str psu_id_type: Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str psu_corporate_id: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_corporate_id_type: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param ConsentId consent_id: This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str tpp_redirect_uri: URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \"true\". It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. 
        :param str tpp_nok_redirect_uri: If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. 
        :param str tpp_explicit_authorisation_preferred: If it equals \"true\", the TPP prefers to start the authorisation process separately,  e.g. because of the usage of a signing basket.  This preference might be ignored by the ASPSP, if a signing basket is not supported as functionality.  If it equals \"false\" or if the parameter is not used, there is no preference of the TPP.  This especially indicates that the TPP assumes a direct authorisation of the transaction in the next step,  without using a signing basket. 
        :param str tpp_rejection_no_funds_preferred: If it equals \"true\" then the TPP prefers a rejection of the payment initiation in case the ASPSP is  providing an integrated confirmation of funds request an the result of this is that not sufficient  funds are available.  If it equals \"false\" then the TPP prefers that the ASPSP is dealing with the payment initiation like  in the ASPSPs online channel, potentially waiting for a certain time period for funds to arrive to initiate the payment.  This parameter might be ignored by the ASPSP. 
        :param str tpp_notification_uri: URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP. 
        :param str tpp_notification_content_preferred: The string has the form   status=X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.initiate_payment_with_http_info(body, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, **kwargs)  # noqa: E501
        else:
            (data) = self.initiate_payment_with_http_info(body, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, **kwargs)  # noqa: E501
            return data

    def initiate_payment_with_http_info(self, body, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, **kwargs):  # noqa: E501
        """Create Payment Initiation  # noqa: E501

        This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***domestic***     - ***international***     - ***swedish-giro***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_payment_with_http_info(body, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: JSON request body for a payment inition request message 

There are the following payment-products supported:
  * "sepa-credit-transfers" with JSON-Body
  * "domestic" with JSON-Body
  * "international" with JSON-Body
  * "swedish-giro" with JSON-Body
  
There are the following payment-services supported:
  * "payments"
  * "periodic-payments"
  * "bulk-paments"

All optional, conditional and predefined but not yet used fields are defined.
 (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (required)
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param str x_affiliated_aspsp_id: The ID of an affiliated ASPSP as related to the X-BicFi header 
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP's documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. 
        :param str psu_id_type: Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str psu_corporate_id: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_corporate_id_type: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param ConsentId consent_id: This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str tpp_redirect_uri: URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \"true\". It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. 
        :param str tpp_nok_redirect_uri: If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. 
        :param str tpp_explicit_authorisation_preferred: If it equals \"true\", the TPP prefers to start the authorisation process separately,  e.g. because of the usage of a signing basket.  This preference might be ignored by the ASPSP, if a signing basket is not supported as functionality.  If it equals \"false\" or if the parameter is not used, there is no preference of the TPP.  This especially indicates that the TPP assumes a direct authorisation of the transaction in the next step,  without using a signing basket. 
        :param str tpp_rejection_no_funds_preferred: If it equals \"true\" then the TPP prefers a rejection of the payment initiation in case the ASPSP is  providing an integrated confirmation of funds request an the result of this is that not sufficient  funds are available.  If it equals \"false\" then the TPP prefers that the ASPSP is dealing with the payment initiation like  in the ASPSPs online channel, potentially waiting for a certain time period for funds to arrive to initiate the payment.  This parameter might be ignored by the ASPSP. 
        :param str tpp_notification_uri: URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP. 
        :param str tpp_notification_content_preferred: The string has the form   status=X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_request_id', 'x_bic_fi', 'psu_ip_address', 'payment_service', 'payment_product', 'x_affiliated_aspsp_id', 'digest', 'signature', 'tpp_signature_certificate', 'psu_id', 'psu_id_type', 'psu_corporate_id', 'psu_corporate_id_type', 'consent_id', 'tpp_redirect_preferred', 'tpp_redirect_uri', 'tpp_nok_redirect_uri', 'tpp_explicit_authorisation_preferred', 'tpp_rejection_no_funds_preferred', 'tpp_notification_uri', 'tpp_notification_content_preferred', 'psu_ip_port', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method initiate_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'psu_ip_address' is set
        if ('psu_ip_address' not in params or
                params['psu_ip_address'] is None):
            raise ValueError("Missing the required parameter `psu_ip_address` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'payment_service' is set
        if ('payment_service' not in params or
                params['payment_service'] is None):
            raise ValueError("Missing the required parameter `payment_service` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if ('payment_product' not in params or
                params['payment_product'] is None):
            raise ValueError("Missing the required parameter `payment_product` when calling `initiate_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'x_affiliated_aspsp_id' in params:
            header_params['X-AffiliatedASPSP-ID'] = params['x_affiliated_aspsp_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_id' in params:
            header_params['PSU-ID'] = params['psu_id']  # noqa: E501
        if 'psu_id_type' in params:
            header_params['PSU-ID-Type'] = params['psu_id_type']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id_type' in params:
            header_params['PSU-Corporate-ID-Type'] = params['psu_corporate_id_type']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'tpp_redirect_uri' in params:
            header_params['TPP-Redirect-URI'] = params['tpp_redirect_uri']  # noqa: E501
        if 'tpp_nok_redirect_uri' in params:
            header_params['TPP-Nok-Redirect-URI'] = params['tpp_nok_redirect_uri']  # noqa: E501
        if 'tpp_explicit_authorisation_preferred' in params:
            header_params['TPP-Explicit-Authorisation-Preferred'] = params['tpp_explicit_authorisation_preferred']  # noqa: E501
        if 'tpp_rejection_no_funds_preferred' in params:
            header_params['TPP-Rejection-NoFunds-Preferred'] = params['tpp_rejection_no_funds_preferred']  # noqa: E501
        if 'tpp_notification_uri' in params:
            header_params['TPP-Notification-URI'] = params['tpp_notification_uri']  # noqa: E501
        if 'tpp_notification_content_preferred' in params:
            header_params['TPP-Notification-Content-Preferred'] = params['tpp_notification_content_preferred']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'xml_sct' in params:
            form_params.append(('xml_sct', params['xml_sct']))  # noqa: E501
        if 'json_standingorder_type' in params:
            form_params.append(('json_standingorderType', params['json_standingorder_type']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/paymentinitiation/v2/{payment-service}/{payment-product}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def initiate_payment(self, body, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, **kwargs):  # noqa: E501
        """Create Payment Initiation  # noqa: E501

        This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***domestic***     - ***international***     - ***swedish-giro***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_payment(body, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: JSON request body for a payment inition request message 

There are the following payment-products supported:
  * "sepa-credit-transfers" with JSON-Body
  * "domestic" with JSON-Body
  * "international" with JSON-Body
  * "swedish-giro" with JSON-Body
  
There are the following payment-services supported:
  * "payments"
  * "periodic-payments"
  * "bulk-paments"

All optional, conditional and predefined but not yet used fields are defined.
 (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (required)
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param str x_affiliated_aspsp_id: The ID of an affiliated ASPSP as related to the X-BicFi header 
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP's documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. 
        :param str psu_id_type: Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str psu_corporate_id: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_corporate_id_type: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param ConsentId consent_id: This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str tpp_redirect_uri: URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \"true\". It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. 
        :param str tpp_nok_redirect_uri: If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. 
        :param str tpp_explicit_authorisation_preferred: If it equals \"true\", the TPP prefers to start the authorisation process separately,  e.g. because of the usage of a signing basket.  This preference might be ignored by the ASPSP, if a signing basket is not supported as functionality.  If it equals \"false\" or if the parameter is not used, there is no preference of the TPP.  This especially indicates that the TPP assumes a direct authorisation of the transaction in the next step,  without using a signing basket. 
        :param str tpp_rejection_no_funds_preferred: If it equals \"true\" then the TPP prefers a rejection of the payment initiation in case the ASPSP is  providing an integrated confirmation of funds request an the result of this is that not sufficient  funds are available.  If it equals \"false\" then the TPP prefers that the ASPSP is dealing with the payment initiation like  in the ASPSPs online channel, potentially waiting for a certain time period for funds to arrive to initiate the payment.  This parameter might be ignored by the ASPSP. 
        :param str tpp_notification_uri: URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP. 
        :param str tpp_notification_content_preferred: The string has the form   status=X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.initiate_payment_with_http_info(body, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, **kwargs)  # noqa: E501
        else:
            (data) = self.initiate_payment_with_http_info(body, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, **kwargs)  # noqa: E501
            return data

    def initiate_payment_with_http_info(self, body, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, **kwargs):  # noqa: E501
        """Create Payment Initiation  # noqa: E501

        This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***domestic***     - ***international***     - ***swedish-giro***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_payment_with_http_info(body, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: JSON request body for a payment inition request message 

There are the following payment-products supported:
  * "sepa-credit-transfers" with JSON-Body
  * "domestic" with JSON-Body
  * "international" with JSON-Body
  * "swedish-giro" with JSON-Body
  
There are the following payment-services supported:
  * "payments"
  * "periodic-payments"
  * "bulk-paments"

All optional, conditional and predefined but not yet used fields are defined.
 (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (required)
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param str x_affiliated_aspsp_id: The ID of an affiliated ASPSP as related to the X-BicFi header 
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP's documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. 
        :param str psu_id_type: Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str psu_corporate_id: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_corporate_id_type: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param ConsentId consent_id: This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str tpp_redirect_uri: URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \"true\". It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. 
        :param str tpp_nok_redirect_uri: If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. 
        :param str tpp_explicit_authorisation_preferred: If it equals \"true\", the TPP prefers to start the authorisation process separately,  e.g. because of the usage of a signing basket.  This preference might be ignored by the ASPSP, if a signing basket is not supported as functionality.  If it equals \"false\" or if the parameter is not used, there is no preference of the TPP.  This especially indicates that the TPP assumes a direct authorisation of the transaction in the next step,  without using a signing basket. 
        :param str tpp_rejection_no_funds_preferred: If it equals \"true\" then the TPP prefers a rejection of the payment initiation in case the ASPSP is  providing an integrated confirmation of funds request an the result of this is that not sufficient  funds are available.  If it equals \"false\" then the TPP prefers that the ASPSP is dealing with the payment initiation like  in the ASPSPs online channel, potentially waiting for a certain time period for funds to arrive to initiate the payment.  This parameter might be ignored by the ASPSP. 
        :param str tpp_notification_uri: URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP. 
        :param str tpp_notification_content_preferred: The string has the form   status=X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_request_id', 'x_bic_fi', 'psu_ip_address', 'payment_service', 'payment_product', 'x_affiliated_aspsp_id', 'digest', 'signature', 'tpp_signature_certificate', 'psu_id', 'psu_id_type', 'psu_corporate_id', 'psu_corporate_id_type', 'consent_id', 'tpp_redirect_preferred', 'tpp_redirect_uri', 'tpp_nok_redirect_uri', 'tpp_explicit_authorisation_preferred', 'tpp_rejection_no_funds_preferred', 'tpp_notification_uri', 'tpp_notification_content_preferred', 'psu_ip_port', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method initiate_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'psu_ip_address' is set
        if ('psu_ip_address' not in params or
                params['psu_ip_address'] is None):
            raise ValueError("Missing the required parameter `psu_ip_address` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'payment_service' is set
        if ('payment_service' not in params or
                params['payment_service'] is None):
            raise ValueError("Missing the required parameter `payment_service` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if ('payment_product' not in params or
                params['payment_product'] is None):
            raise ValueError("Missing the required parameter `payment_product` when calling `initiate_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'x_affiliated_aspsp_id' in params:
            header_params['X-AffiliatedASPSP-ID'] = params['x_affiliated_aspsp_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_id' in params:
            header_params['PSU-ID'] = params['psu_id']  # noqa: E501
        if 'psu_id_type' in params:
            header_params['PSU-ID-Type'] = params['psu_id_type']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id_type' in params:
            header_params['PSU-Corporate-ID-Type'] = params['psu_corporate_id_type']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'tpp_redirect_uri' in params:
            header_params['TPP-Redirect-URI'] = params['tpp_redirect_uri']  # noqa: E501
        if 'tpp_nok_redirect_uri' in params:
            header_params['TPP-Nok-Redirect-URI'] = params['tpp_nok_redirect_uri']  # noqa: E501
        if 'tpp_explicit_authorisation_preferred' in params:
            header_params['TPP-Explicit-Authorisation-Preferred'] = params['tpp_explicit_authorisation_preferred']  # noqa: E501
        if 'tpp_rejection_no_funds_preferred' in params:
            header_params['TPP-Rejection-NoFunds-Preferred'] = params['tpp_rejection_no_funds_preferred']  # noqa: E501
        if 'tpp_notification_uri' in params:
            header_params['TPP-Notification-URI'] = params['tpp_notification_uri']  # noqa: E501
        if 'tpp_notification_content_preferred' in params:
            header_params['TPP-Notification-Content-Preferred'] = params['tpp_notification_content_preferred']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'xml_sct' in params:
            form_params.append(('xml_sct', params['xml_sct']))  # noqa: E501
        if 'json_standingorder_type' in params:
            form_params.append(('json_standingorderType', params['json_standingorder_type']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/paymentinitiation/v2/{payment-service}/{payment-product}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def initiate_payment(self, xml_sct, json_standingorder_type, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, **kwargs):  # noqa: E501
        """Create Payment Initiation  # noqa: E501

        This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***domestic***     - ***international***     - ***swedish-giro***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_payment(xml_sct, json_standingorder_type, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object xml_sct: (required)
        :param PeriodicPaymentInitiationXmlPart2StandingorderTypeJson json_standingorder_type: (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (required)
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param str x_affiliated_aspsp_id: The ID of an affiliated ASPSP as related to the X-BicFi header 
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP's documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. 
        :param str psu_id_type: Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str psu_corporate_id: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_corporate_id_type: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param ConsentId consent_id: This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str tpp_redirect_uri: URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \"true\". It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. 
        :param str tpp_nok_redirect_uri: If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. 
        :param str tpp_explicit_authorisation_preferred: If it equals \"true\", the TPP prefers to start the authorisation process separately,  e.g. because of the usage of a signing basket.  This preference might be ignored by the ASPSP, if a signing basket is not supported as functionality.  If it equals \"false\" or if the parameter is not used, there is no preference of the TPP.  This especially indicates that the TPP assumes a direct authorisation of the transaction in the next step,  without using a signing basket. 
        :param str tpp_rejection_no_funds_preferred: If it equals \"true\" then the TPP prefers a rejection of the payment initiation in case the ASPSP is  providing an integrated confirmation of funds request an the result of this is that not sufficient  funds are available.  If it equals \"false\" then the TPP prefers that the ASPSP is dealing with the payment initiation like  in the ASPSPs online channel, potentially waiting for a certain time period for funds to arrive to initiate the payment.  This parameter might be ignored by the ASPSP. 
        :param str tpp_notification_uri: URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP. 
        :param str tpp_notification_content_preferred: The string has the form   status=X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.initiate_payment_with_http_info(xml_sct, json_standingorder_type, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, **kwargs)  # noqa: E501
        else:
            (data) = self.initiate_payment_with_http_info(xml_sct, json_standingorder_type, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, **kwargs)  # noqa: E501
            return data

    def initiate_payment_with_http_info(self, xml_sct, json_standingorder_type, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, **kwargs):  # noqa: E501
        """Create Payment Initiation  # noqa: E501

        This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***domestic***     - ***international***     - ***swedish-giro***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_payment_with_http_info(xml_sct, json_standingorder_type, x_request_id, x_bic_fi, psu_ip_address, payment_service, payment_product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object xml_sct: (required)
        :param PeriodicPaymentInitiationXmlPart2StandingorderTypeJson json_standingorder_type: (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (required)
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param str x_affiliated_aspsp_id: The ID of an affiliated ASPSP as related to the X-BicFi header 
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP's documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. 
        :param str psu_id_type: Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str psu_corporate_id: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_corporate_id_type: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param ConsentId consent_id: This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str tpp_redirect_uri: URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \"true\". It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. 
        :param str tpp_nok_redirect_uri: If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. 
        :param str tpp_explicit_authorisation_preferred: If it equals \"true\", the TPP prefers to start the authorisation process separately,  e.g. because of the usage of a signing basket.  This preference might be ignored by the ASPSP, if a signing basket is not supported as functionality.  If it equals \"false\" or if the parameter is not used, there is no preference of the TPP.  This especially indicates that the TPP assumes a direct authorisation of the transaction in the next step,  without using a signing basket. 
        :param str tpp_rejection_no_funds_preferred: If it equals \"true\" then the TPP prefers a rejection of the payment initiation in case the ASPSP is  providing an integrated confirmation of funds request an the result of this is that not sufficient  funds are available.  If it equals \"false\" then the TPP prefers that the ASPSP is dealing with the payment initiation like  in the ASPSPs online channel, potentially waiting for a certain time period for funds to arrive to initiate the payment.  This parameter might be ignored by the ASPSP. 
        :param str tpp_notification_uri: URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP. 
        :param str tpp_notification_content_preferred: The string has the form   status=X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xml_sct', 'json_standingorder_type', 'x_request_id', 'x_bic_fi', 'psu_ip_address', 'payment_service', 'payment_product', 'x_affiliated_aspsp_id', 'digest', 'signature', 'tpp_signature_certificate', 'psu_id', 'psu_id_type', 'psu_corporate_id', 'psu_corporate_id_type', 'consent_id', 'tpp_redirect_preferred', 'tpp_redirect_uri', 'tpp_nok_redirect_uri', 'tpp_explicit_authorisation_preferred', 'tpp_rejection_no_funds_preferred', 'tpp_notification_uri', 'tpp_notification_content_preferred', 'psu_ip_port', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method initiate_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'xml_sct' is set
        if ('xml_sct' not in params or
                params['xml_sct'] is None):
            raise ValueError("Missing the required parameter `xml_sct` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'json_standingorder_type' is set
        if ('json_standingorder_type' not in params or
                params['json_standingorder_type'] is None):
            raise ValueError("Missing the required parameter `json_standingorder_type` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'psu_ip_address' is set
        if ('psu_ip_address' not in params or
                params['psu_ip_address'] is None):
            raise ValueError("Missing the required parameter `psu_ip_address` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'payment_service' is set
        if ('payment_service' not in params or
                params['payment_service'] is None):
            raise ValueError("Missing the required parameter `payment_service` when calling `initiate_payment`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if ('payment_product' not in params or
                params['payment_product'] is None):
            raise ValueError("Missing the required parameter `payment_product` when calling `initiate_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'x_affiliated_aspsp_id' in params:
            header_params['X-AffiliatedASPSP-ID'] = params['x_affiliated_aspsp_id']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_id' in params:
            header_params['PSU-ID'] = params['psu_id']  # noqa: E501
        if 'psu_id_type' in params:
            header_params['PSU-ID-Type'] = params['psu_id_type']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id_type' in params:
            header_params['PSU-Corporate-ID-Type'] = params['psu_corporate_id_type']  # noqa: E501
        if 'consent_id' in params:
            header_params['Consent-ID'] = params['consent_id']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'tpp_redirect_uri' in params:
            header_params['TPP-Redirect-URI'] = params['tpp_redirect_uri']  # noqa: E501
        if 'tpp_nok_redirect_uri' in params:
            header_params['TPP-Nok-Redirect-URI'] = params['tpp_nok_redirect_uri']  # noqa: E501
        if 'tpp_explicit_authorisation_preferred' in params:
            header_params['TPP-Explicit-Authorisation-Preferred'] = params['tpp_explicit_authorisation_preferred']  # noqa: E501
        if 'tpp_rejection_no_funds_preferred' in params:
            header_params['TPP-Rejection-NoFunds-Preferred'] = params['tpp_rejection_no_funds_preferred']  # noqa: E501
        if 'tpp_notification_uri' in params:
            header_params['TPP-Notification-URI'] = params['tpp_notification_uri']  # noqa: E501
        if 'tpp_notification_content_preferred' in params:
            header_params['TPP-Notification-Content-Preferred'] = params['tpp_notification_content_preferred']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'xml_sct' in params:
            form_params.append(('xml_sct', params['xml_sct']))  # noqa: E501
        if 'json_standingorder_type' in params:
            form_params.append(('json_standingorderType', params['json_standingorder_type']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/paymentinitiation/v2/{payment-service}/{payment-product}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_payment_authorisation(self, x_request_id, x_bic_fi, payment_service, payment_product, payment_id, **kwargs):  # noqa: E501
        """Start Payment Initiation Authorisation Process  # noqa: E501

        Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'      * 'startAuthorisationWithEncryptedPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_payment_authorisation(x_request_id, x_bic_fi, payment_service, payment_product, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param PaymentIdAuthorisationsBody body:
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP's documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. 
        :param str psu_id_type: Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str psu_corporate_id: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_corporate_id_type: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str tpp_redirect_uri: URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \"true\". It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. 
        :param str tpp_nok_redirect_uri: If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. 
        :param str tpp_notification_uri: URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP. 
        :param str tpp_notification_content_preferred: The string has the form   status=X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. 
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: StartScaprocessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_payment_authorisation_with_http_info(x_request_id, x_bic_fi, payment_service, payment_product, payment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_payment_authorisation_with_http_info(x_request_id, x_bic_fi, payment_service, payment_product, payment_id, **kwargs)  # noqa: E501
            return data

    def start_payment_authorisation_with_http_info(self, x_request_id, x_bic_fi, payment_service, payment_product, payment_id, **kwargs):  # noqa: E501
        """Start Payment Initiation Authorisation Process  # noqa: E501

        Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'      * 'startAuthorisationWithEncryptedPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_payment_authorisation_with_http_info(x_request_id, x_bic_fi, payment_service, payment_product, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param PaymentIdAuthorisationsBody body:
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP's documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. 
        :param str psu_id_type: Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str psu_corporate_id: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_corporate_id_type: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str tpp_redirect_uri: URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \"true\". It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. 
        :param str tpp_nok_redirect_uri: If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. 
        :param str tpp_notification_uri: URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP. 
        :param str tpp_notification_content_preferred: The string has the form   status=X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. 
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: StartScaprocessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'x_bic_fi', 'payment_service', 'payment_product', 'payment_id', 'body', 'psu_id', 'psu_id_type', 'psu_corporate_id', 'psu_corporate_id_type', 'tpp_redirect_preferred', 'tpp_redirect_uri', 'tpp_nok_redirect_uri', 'tpp_notification_uri', 'tpp_notification_content_preferred', 'digest', 'signature', 'tpp_signature_certificate', 'psu_ip_address', 'psu_ip_port', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_payment_authorisation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `start_payment_authorisation`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `start_payment_authorisation`")  # noqa: E501
        # verify the required parameter 'payment_service' is set
        if ('payment_service' not in params or
                params['payment_service'] is None):
            raise ValueError("Missing the required parameter `payment_service` when calling `start_payment_authorisation`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if ('payment_product' not in params or
                params['payment_product'] is None):
            raise ValueError("Missing the required parameter `payment_product` when calling `start_payment_authorisation`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `start_payment_authorisation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'psu_id' in params:
            header_params['PSU-ID'] = params['psu_id']  # noqa: E501
        if 'psu_id_type' in params:
            header_params['PSU-ID-Type'] = params['psu_id_type']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id_type' in params:
            header_params['PSU-Corporate-ID-Type'] = params['psu_corporate_id_type']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'tpp_redirect_uri' in params:
            header_params['TPP-Redirect-URI'] = params['tpp_redirect_uri']  # noqa: E501
        if 'tpp_nok_redirect_uri' in params:
            header_params['TPP-Nok-Redirect-URI'] = params['tpp_nok_redirect_uri']  # noqa: E501
        if 'tpp_notification_uri' in params:
            header_params['TPP-Notification-URI'] = params['tpp_notification_uri']  # noqa: E501
        if 'tpp_notification_content_preferred' in params:
            header_params['TPP-Notification-Content-Preferred'] = params['tpp_notification_content_preferred']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/paymentinitiation/v2/{payment-service}/{payment-product}/{paymentId}/authorisations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StartScaprocessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_payment_initiation_cancellation_authorisation(self, payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Start Payment Initiation Cancellation Authorisation Process  # noqa: E501

        Creates an authorisation sub-resource and start the authorisation process of the cancellation of the addressed payment.  The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the cancellation-authorisation.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'      * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_payment_initiation_cancellation_authorisation(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP's documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. 
        :param str psu_id_type: Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str psu_corporate_id: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_corporate_id_type: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str tpp_redirect_uri: URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \"true\". It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. 
        :param str tpp_nok_redirect_uri: If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. 
        :param str tpp_notification_uri: URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP. 
        :param str tpp_notification_content_preferred: The string has the form   status=X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: StartScaprocessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_payment_initiation_cancellation_authorisation_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
        else:
            (data) = self.start_payment_initiation_cancellation_authorisation_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs)  # noqa: E501
            return data

    def start_payment_initiation_cancellation_authorisation_with_http_info(self, payment_service, payment_product, payment_id, x_request_id, x_bic_fi, **kwargs):  # noqa: E501
        """Start Payment Initiation Cancellation Authorisation Process  # noqa: E501

        Creates an authorisation sub-resource and start the authorisation process of the cancellation of the addressed payment.  The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the cancellation-authorisation.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'      * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_payment_initiation_cancellation_authorisation_with_http_info(payment_service, payment_product, payment_id, x_request_id, x_bic_fi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP's documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. 
        :param str psu_id_type: Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str psu_corporate_id: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_corporate_id_type: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str tpp_redirect_uri: URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \"true\". It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. 
        :param str tpp_nok_redirect_uri: If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. 
        :param str tpp_notification_uri: URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP. 
        :param str tpp_notification_content_preferred: The string has the form   status=X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: StartScaprocessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_service', 'payment_product', 'payment_id', 'x_request_id', 'x_bic_fi', 'digest', 'signature', 'tpp_signature_certificate', 'psu_id', 'psu_id_type', 'psu_corporate_id', 'psu_corporate_id_type', 'tpp_redirect_preferred', 'tpp_redirect_uri', 'tpp_nok_redirect_uri', 'tpp_notification_uri', 'tpp_notification_content_preferred', 'psu_ip_address', 'psu_ip_port', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_payment_initiation_cancellation_authorisation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_service' is set
        if ('payment_service' not in params or
                params['payment_service'] is None):
            raise ValueError("Missing the required parameter `payment_service` when calling `start_payment_initiation_cancellation_authorisation`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if ('payment_product' not in params or
                params['payment_product'] is None):
            raise ValueError("Missing the required parameter `payment_product` when calling `start_payment_initiation_cancellation_authorisation`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `start_payment_initiation_cancellation_authorisation`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `start_payment_initiation_cancellation_authorisation`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `start_payment_initiation_cancellation_authorisation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_id' in params:
            header_params['PSU-ID'] = params['psu_id']  # noqa: E501
        if 'psu_id_type' in params:
            header_params['PSU-ID-Type'] = params['psu_id_type']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id_type' in params:
            header_params['PSU-Corporate-ID-Type'] = params['psu_corporate_id_type']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'tpp_redirect_uri' in params:
            header_params['TPP-Redirect-URI'] = params['tpp_redirect_uri']  # noqa: E501
        if 'tpp_nok_redirect_uri' in params:
            header_params['TPP-Nok-Redirect-URI'] = params['tpp_nok_redirect_uri']  # noqa: E501
        if 'tpp_notification_uri' in params:
            header_params['TPP-Notification-URI'] = params['tpp_notification_uri']  # noqa: E501
        if 'tpp_notification_content_preferred' in params:
            header_params['TPP-Notification-Content-Preferred'] = params['tpp_notification_content_preferred']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/paymentinitiation/v2/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StartScaprocessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_payment_cancellation_psu_data(self, x_request_id, x_bic_fi, payment_service, payment_product, payment_id, cancellation_id, **kwargs):  # noqa: E501
        """Update PSU Data for Payment Initiation Cancellation  # noqa: E501

        This method updates PSU data on the cancellation authorisation resource if needed.  It may authorise a cancellation of the payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a cancellation authorisation within the payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_payment_cancellation_psu_data(x_request_id, x_bic_fi, payment_service, payment_product, payment_id, cancellation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param CancellationId cancellation_id: Identification for cancellation resource. (required)
        :param CancellationauthorisationsCancellationIdBody body:
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP's documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. 
        :param str psu_id_type: Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str psu_corporate_id: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_corporate_id_type: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_payment_cancellation_psu_data_with_http_info(x_request_id, x_bic_fi, payment_service, payment_product, payment_id, cancellation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_payment_cancellation_psu_data_with_http_info(x_request_id, x_bic_fi, payment_service, payment_product, payment_id, cancellation_id, **kwargs)  # noqa: E501
            return data

    def update_payment_cancellation_psu_data_with_http_info(self, x_request_id, x_bic_fi, payment_service, payment_product, payment_id, cancellation_id, **kwargs):  # noqa: E501
        """Update PSU Data for Payment Initiation Cancellation  # noqa: E501

        This method updates PSU data on the cancellation authorisation resource if needed.  It may authorise a cancellation of the payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a cancellation authorisation within the payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_payment_cancellation_psu_data_with_http_info(x_request_id, x_bic_fi, payment_service, payment_product, payment_id, cancellation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param CancellationId cancellation_id: Identification for cancellation resource. (required)
        :param CancellationauthorisationsCancellationIdBody body:
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP's documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. 
        :param str psu_id_type: Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str psu_corporate_id: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_corporate_id_type: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'x_bic_fi', 'payment_service', 'payment_product', 'payment_id', 'cancellation_id', 'body', 'digest', 'signature', 'tpp_signature_certificate', 'psu_id', 'psu_id_type', 'psu_corporate_id', 'psu_corporate_id_type', 'psu_ip_address', 'psu_ip_port', 'tpp_redirect_preferred', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_payment_cancellation_psu_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `update_payment_cancellation_psu_data`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `update_payment_cancellation_psu_data`")  # noqa: E501
        # verify the required parameter 'payment_service' is set
        if ('payment_service' not in params or
                params['payment_service'] is None):
            raise ValueError("Missing the required parameter `payment_service` when calling `update_payment_cancellation_psu_data`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if ('payment_product' not in params or
                params['payment_product'] is None):
            raise ValueError("Missing the required parameter `payment_product` when calling `update_payment_cancellation_psu_data`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `update_payment_cancellation_psu_data`")  # noqa: E501
        # verify the required parameter 'cancellation_id' is set
        if ('cancellation_id' not in params or
                params['cancellation_id'] is None):
            raise ValueError("Missing the required parameter `cancellation_id` when calling `update_payment_cancellation_psu_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501
        if 'cancellation_id' in params:
            path_params['cancellationId'] = params['cancellation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_id' in params:
            header_params['PSU-ID'] = params['psu_id']  # noqa: E501
        if 'psu_id_type' in params:
            header_params['PSU-ID-Type'] = params['psu_id_type']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id_type' in params:
            header_params['PSU-Corporate-ID-Type'] = params['psu_corporate_id_type']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/paymentinitiation/v2/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations/{cancellationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_payment_psu_data(self, x_request_id, x_bic_fi, payment_service, payment_product, payment_id, authorisation_id, **kwargs):  # noqa: E501
        """Update PSU Data for Payment Initiation  # noqa: E501

        This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_payment_psu_data(x_request_id, x_bic_fi, payment_service, payment_product, payment_id, authorisation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param AuthorisationId authorisation_id: Resource identification of the related SCA. (required)
        :param AuthorisationsAuthorisationIdBody body:
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP's documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. 
        :param str psu_id_type: Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str psu_corporate_id: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_corporate_id_type: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_payment_psu_data_with_http_info(x_request_id, x_bic_fi, payment_service, payment_product, payment_id, authorisation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_payment_psu_data_with_http_info(x_request_id, x_bic_fi, payment_service, payment_product, payment_id, authorisation_id, **kwargs)  # noqa: E501
            return data

    def update_payment_psu_data_with_http_info(self, x_request_id, x_bic_fi, payment_service, payment_product, payment_id, authorisation_id, **kwargs):  # noqa: E501
        """Update PSU Data for Payment Initiation  # noqa: E501

        This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_payment_psu_data_with_http_info(x_request_id, x_bic_fi, payment_service, payment_product, payment_id, authorisation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: ID of the request, unique to the call, as determined by the initiating party. (required)
        :param str x_bic_fi: BICFI (required)
        :param str payment_service: Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
        :param str payment_product: The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).  The following payment products are supported:   - sepa-credit-transfers   - domestic   - international   - swedish-giro  (required)
        :param PaymentId payment_id: Resource identification of the generated payment initiation resource. (required)
        :param AuthorisationId authorisation_id: Resource identification of the related SCA. (required)
        :param AuthorisationsAuthorisationIdBody body:
        :param str digest: Is contained if and only if the \"Signature\" element is contained in the header of the request.
        :param str signature: A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
        :param str tpp_signature_certificate: The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. 
        :param str psu_id: Client ID of the PSU in the ASPSP client interface. Might be mandated in the ASPSP's documentation. Is not contained if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. 
        :param str psu_id_type: Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str psu_corporate_id: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_corporate_id_type: Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
        :param str psu_ip_address: The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
        :param str psu_ip_port: The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str tpp_redirect_preferred: If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
        :param str psu_accept: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_charset: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_encoding: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_accept_language: The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
        :param str psu_user_agent: The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
        :param str psu_http_method: HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
        :param str psu_device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str psu_geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'x_bic_fi', 'payment_service', 'payment_product', 'payment_id', 'authorisation_id', 'body', 'digest', 'signature', 'tpp_signature_certificate', 'psu_id', 'psu_id_type', 'psu_corporate_id', 'psu_corporate_id_type', 'psu_ip_address', 'psu_ip_port', 'tpp_redirect_preferred', 'psu_accept', 'psu_accept_charset', 'psu_accept_encoding', 'psu_accept_language', 'psu_user_agent', 'psu_http_method', 'psu_device_id', 'psu_geo_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_payment_psu_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `update_payment_psu_data`")  # noqa: E501
        # verify the required parameter 'x_bic_fi' is set
        if ('x_bic_fi' not in params or
                params['x_bic_fi'] is None):
            raise ValueError("Missing the required parameter `x_bic_fi` when calling `update_payment_psu_data`")  # noqa: E501
        # verify the required parameter 'payment_service' is set
        if ('payment_service' not in params or
                params['payment_service'] is None):
            raise ValueError("Missing the required parameter `payment_service` when calling `update_payment_psu_data`")  # noqa: E501
        # verify the required parameter 'payment_product' is set
        if ('payment_product' not in params or
                params['payment_product'] is None):
            raise ValueError("Missing the required parameter `payment_product` when calling `update_payment_psu_data`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `update_payment_psu_data`")  # noqa: E501
        # verify the required parameter 'authorisation_id' is set
        if ('authorisation_id' not in params or
                params['authorisation_id'] is None):
            raise ValueError("Missing the required parameter `authorisation_id` when calling `update_payment_psu_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_service' in params:
            path_params['payment-service'] = params['payment_service']  # noqa: E501
        if 'payment_product' in params:
            path_params['payment-product'] = params['payment_product']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501
        if 'authorisation_id' in params:
            path_params['authorisationId'] = params['authorisation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'x_bic_fi' in params:
            header_params['X-BicFi'] = params['x_bic_fi']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'tpp_signature_certificate' in params:
            header_params['TPP-Signature-Certificate'] = params['tpp_signature_certificate']  # noqa: E501
        if 'psu_id' in params:
            header_params['PSU-ID'] = params['psu_id']  # noqa: E501
        if 'psu_id_type' in params:
            header_params['PSU-ID-Type'] = params['psu_id_type']  # noqa: E501
        if 'psu_corporate_id' in params:
            header_params['PSU-Corporate-ID'] = params['psu_corporate_id']  # noqa: E501
        if 'psu_corporate_id_type' in params:
            header_params['PSU-Corporate-ID-Type'] = params['psu_corporate_id_type']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PSU-IP-Address'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PSU-IP-Port'] = params['psu_ip_port']  # noqa: E501
        if 'tpp_redirect_preferred' in params:
            header_params['TPP-Redirect-Preferred'] = params['tpp_redirect_preferred']  # noqa: E501
        if 'psu_accept' in params:
            header_params['PSU-Accept'] = params['psu_accept']  # noqa: E501
        if 'psu_accept_charset' in params:
            header_params['PSU-Accept-Charset'] = params['psu_accept_charset']  # noqa: E501
        if 'psu_accept_encoding' in params:
            header_params['PSU-Accept-Encoding'] = params['psu_accept_encoding']  # noqa: E501
        if 'psu_accept_language' in params:
            header_params['PSU-Accept-Language'] = params['psu_accept_language']  # noqa: E501
        if 'psu_user_agent' in params:
            header_params['PSU-User-Agent'] = params['psu_user_agent']  # noqa: E501
        if 'psu_http_method' in params:
            header_params['PSU-Http-Method'] = params['psu_http_method']  # noqa: E501
        if 'psu_device_id' in params:
            header_params['PSU-Device-ID'] = params['psu_device_id']  # noqa: E501
        if 'psu_geo_location' in params:
            header_params['PSU-Geo-Location'] = params['psu_geo_location']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/paymentinitiation/v2/{payment-service}/{payment-product}/{paymentId}/authorisations/{authorisationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
