# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_id': 'str',
        'iban': 'Iban',
        'bban': 'Bban',
        'msisdn': 'Msisdn',
        'bankgiro_number': 'BankGiroNumber',
        'plusgiro_number': 'PlusGiroNumber',
        'currency': 'CurrencyCode',
        'name': 'str',
        'product': 'str',
        'cash_account_type': 'CashAccountType',
        'status': 'AccountStatus',
        'bic': 'Bicfi',
        'linked_accounts': 'str',
        'usage': 'str',
        'details': 'str',
        'balances': 'BalanceList',
        'links': 'LinksAccountDetails',
        'owner_name': 'str',
        'clearing_number': 'ClearingNumber'
    }

    attribute_map = {
        'resource_id': 'resourceId',
        'iban': 'iban',
        'bban': 'bban',
        'msisdn': 'msisdn',
        'bankgiro_number': 'bankgiroNumber',
        'plusgiro_number': 'plusgiroNumber',
        'currency': 'currency',
        'name': 'name',
        'product': 'product',
        'cash_account_type': 'cashAccountType',
        'status': 'status',
        'bic': 'bic',
        'linked_accounts': 'linkedAccounts',
        'usage': 'usage',
        'details': 'details',
        'balances': 'balances',
        'links': '_links',
        'owner_name': 'ownerName',
        'clearing_number': 'clearingNumber'
    }

    def __init__(self, resource_id=None, iban=None, bban=None, msisdn=None, bankgiro_number=None, plusgiro_number=None, currency=None, name=None, product=None, cash_account_type=None, status=None, bic=None, linked_accounts=None, usage=None, details=None, balances=None, links=None, owner_name=None, clearing_number=None):  # noqa: E501
        """AccountDetails - a model defined in Swagger"""  # noqa: E501
        self._resource_id = None
        self._iban = None
        self._bban = None
        self._msisdn = None
        self._bankgiro_number = None
        self._plusgiro_number = None
        self._currency = None
        self._name = None
        self._product = None
        self._cash_account_type = None
        self._status = None
        self._bic = None
        self._linked_accounts = None
        self._usage = None
        self._details = None
        self._balances = None
        self._links = None
        self._owner_name = None
        self._clearing_number = None
        self.discriminator = None
        if resource_id is not None:
            self.resource_id = resource_id
        if iban is not None:
            self.iban = iban
        if bban is not None:
            self.bban = bban
        if msisdn is not None:
            self.msisdn = msisdn
        if bankgiro_number is not None:
            self.bankgiro_number = bankgiro_number
        if plusgiro_number is not None:
            self.plusgiro_number = plusgiro_number
        self.currency = currency
        if name is not None:
            self.name = name
        if product is not None:
            self.product = product
        if cash_account_type is not None:
            self.cash_account_type = cash_account_type
        if status is not None:
            self.status = status
        if bic is not None:
            self.bic = bic
        if linked_accounts is not None:
            self.linked_accounts = linked_accounts
        if usage is not None:
            self.usage = usage
        if details is not None:
            self.details = details
        if balances is not None:
            self.balances = balances
        if links is not None:
            self.links = links
        if owner_name is not None:
            self.owner_name = owner_name
        if clearing_number is not None:
            self.clearing_number = clearing_number

    @property
    def resource_id(self):
        """Gets the resource_id of this AccountDetails.  # noqa: E501

        This shall be filled, if addressable resource are created by the ASPSP on the /accounts or /card-accounts endpoint.  # noqa: E501

        :return: The resource_id of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AccountDetails.

        This shall be filled, if addressable resource are created by the ASPSP on the /accounts or /card-accounts endpoint.  # noqa: E501

        :param resource_id: The resource_id of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def iban(self):
        """Gets the iban of this AccountDetails.  # noqa: E501


        :return: The iban of this AccountDetails.  # noqa: E501
        :rtype: Iban
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this AccountDetails.


        :param iban: The iban of this AccountDetails.  # noqa: E501
        :type: Iban
        """

        self._iban = iban

    @property
    def bban(self):
        """Gets the bban of this AccountDetails.  # noqa: E501


        :return: The bban of this AccountDetails.  # noqa: E501
        :rtype: Bban
        """
        return self._bban

    @bban.setter
    def bban(self, bban):
        """Sets the bban of this AccountDetails.


        :param bban: The bban of this AccountDetails.  # noqa: E501
        :type: Bban
        """

        self._bban = bban

    @property
    def msisdn(self):
        """Gets the msisdn of this AccountDetails.  # noqa: E501


        :return: The msisdn of this AccountDetails.  # noqa: E501
        :rtype: Msisdn
        """
        return self._msisdn

    @msisdn.setter
    def msisdn(self, msisdn):
        """Sets the msisdn of this AccountDetails.


        :param msisdn: The msisdn of this AccountDetails.  # noqa: E501
        :type: Msisdn
        """

        self._msisdn = msisdn

    @property
    def bankgiro_number(self):
        """Gets the bankgiro_number of this AccountDetails.  # noqa: E501


        :return: The bankgiro_number of this AccountDetails.  # noqa: E501
        :rtype: BankGiroNumber
        """
        return self._bankgiro_number

    @bankgiro_number.setter
    def bankgiro_number(self, bankgiro_number):
        """Sets the bankgiro_number of this AccountDetails.


        :param bankgiro_number: The bankgiro_number of this AccountDetails.  # noqa: E501
        :type: BankGiroNumber
        """

        self._bankgiro_number = bankgiro_number

    @property
    def plusgiro_number(self):
        """Gets the plusgiro_number of this AccountDetails.  # noqa: E501


        :return: The plusgiro_number of this AccountDetails.  # noqa: E501
        :rtype: PlusGiroNumber
        """
        return self._plusgiro_number

    @plusgiro_number.setter
    def plusgiro_number(self, plusgiro_number):
        """Sets the plusgiro_number of this AccountDetails.


        :param plusgiro_number: The plusgiro_number of this AccountDetails.  # noqa: E501
        :type: PlusGiroNumber
        """

        self._plusgiro_number = plusgiro_number

    @property
    def currency(self):
        """Gets the currency of this AccountDetails.  # noqa: E501


        :return: The currency of this AccountDetails.  # noqa: E501
        :rtype: CurrencyCode
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountDetails.


        :param currency: The currency of this AccountDetails.  # noqa: E501
        :type: CurrencyCode
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def name(self):
        """Gets the name of this AccountDetails.  # noqa: E501

        Name of the account given by the bank or the PSU in online-banking.  # noqa: E501

        :return: The name of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountDetails.

        Name of the account given by the bank or the PSU in online-banking.  # noqa: E501

        :param name: The name of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def product(self):
        """Gets the product of this AccountDetails.  # noqa: E501

        Product name of the bank for this account, proprietary definition.  # noqa: E501

        :return: The product of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this AccountDetails.

        Product name of the bank for this account, proprietary definition.  # noqa: E501

        :param product: The product of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def cash_account_type(self):
        """Gets the cash_account_type of this AccountDetails.  # noqa: E501


        :return: The cash_account_type of this AccountDetails.  # noqa: E501
        :rtype: CashAccountType
        """
        return self._cash_account_type

    @cash_account_type.setter
    def cash_account_type(self, cash_account_type):
        """Sets the cash_account_type of this AccountDetails.


        :param cash_account_type: The cash_account_type of this AccountDetails.  # noqa: E501
        :type: CashAccountType
        """

        self._cash_account_type = cash_account_type

    @property
    def status(self):
        """Gets the status of this AccountDetails.  # noqa: E501


        :return: The status of this AccountDetails.  # noqa: E501
        :rtype: AccountStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountDetails.


        :param status: The status of this AccountDetails.  # noqa: E501
        :type: AccountStatus
        """

        self._status = status

    @property
    def bic(self):
        """Gets the bic of this AccountDetails.  # noqa: E501


        :return: The bic of this AccountDetails.  # noqa: E501
        :rtype: Bicfi
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this AccountDetails.


        :param bic: The bic of this AccountDetails.  # noqa: E501
        :type: Bicfi
        """

        self._bic = bic

    @property
    def linked_accounts(self):
        """Gets the linked_accounts of this AccountDetails.  # noqa: E501

        Case of a set of pending card transactions, the APSP will provide the relevant cash account the card is set up on.  # noqa: E501

        :return: The linked_accounts of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._linked_accounts

    @linked_accounts.setter
    def linked_accounts(self, linked_accounts):
        """Sets the linked_accounts of this AccountDetails.

        Case of a set of pending card transactions, the APSP will provide the relevant cash account the card is set up on.  # noqa: E501

        :param linked_accounts: The linked_accounts of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._linked_accounts = linked_accounts

    @property
    def usage(self):
        """Gets the usage of this AccountDetails.  # noqa: E501

        Specifies the usage of the account   * PRIV: private personal account   * ORGA: professional account   # noqa: E501

        :return: The usage of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this AccountDetails.

        Specifies the usage of the account   * PRIV: private personal account   * ORGA: professional account   # noqa: E501

        :param usage: The usage of this AccountDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRIV", "ORGA"]  # noqa: E501
        if usage not in allowed_values:
            raise ValueError(
                "Invalid value for `usage` ({0}), must be one of {1}"  # noqa: E501
                .format(usage, allowed_values)
            )

        self._usage = usage

    @property
    def details(self):
        """Gets the details of this AccountDetails.  # noqa: E501

        Specifications that might be provided by the ASPSP   - characteristics of the account   - characteristics of the relevant card   # noqa: E501

        :return: The details of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this AccountDetails.

        Specifications that might be provided by the ASPSP   - characteristics of the account   - characteristics of the relevant card   # noqa: E501

        :param details: The details of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def balances(self):
        """Gets the balances of this AccountDetails.  # noqa: E501


        :return: The balances of this AccountDetails.  # noqa: E501
        :rtype: BalanceList
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this AccountDetails.


        :param balances: The balances of this AccountDetails.  # noqa: E501
        :type: BalanceList
        """

        self._balances = balances

    @property
    def links(self):
        """Gets the links of this AccountDetails.  # noqa: E501


        :return: The links of this AccountDetails.  # noqa: E501
        :rtype: LinksAccountDetails
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AccountDetails.


        :param links: The links of this AccountDetails.  # noqa: E501
        :type: LinksAccountDetails
        """

        self._links = links

    @property
    def owner_name(self):
        """Gets the owner_name of this AccountDetails.  # noqa: E501

        Name of the legal account owner.  If there is more than one owner, then e.g. two names might be noted here.  For a corporate account, the corporate name is used for this attribute. Even if supported by the ASPSP, the provision of this field might depend on the fact whether an explicit consent to this specific additional account information has been given by the PSU.   # noqa: E501

        :return: The owner_name of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this AccountDetails.

        Name of the legal account owner.  If there is more than one owner, then e.g. two names might be noted here.  For a corporate account, the corporate name is used for this attribute. Even if supported by the ASPSP, the provision of this field might depend on the fact whether an explicit consent to this specific additional account information has been given by the PSU.   # noqa: E501

        :param owner_name: The owner_name of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def clearing_number(self):
        """Gets the clearing_number of this AccountDetails.  # noqa: E501


        :return: The clearing_number of this AccountDetails.  # noqa: E501
        :rtype: ClearingNumber
        """
        return self._clearing_number

    @clearing_number.setter
    def clearing_number(self, clearing_number):
        """Sets the clearing_number of this AccountDetails.


        :param clearing_number: The clearing_number of this AccountDetails.  # noqa: E501
        :type: ClearingNumber
        """

        self._clearing_number = clearing_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
