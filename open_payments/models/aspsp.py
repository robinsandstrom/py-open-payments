# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Aspsp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bic_fi': 'str',
        'name': 'str',
        'logo_url': 'str',
        'city': 'str',
        'country': 'str',
        'postal_code': 'str',
        'street_address': 'str',
        'company_number': 'str',
        'phone': 'str',
        'website_url': 'str',
        'global_payment_products': 'list[str]',
        'supported_authorization_methods': 'SupportedAuthorizationMethods',
        'affiliated_aspsps': 'AffiliatedAspsps'
    }

    attribute_map = {
        'bic_fi': 'bicFi',
        'name': 'name',
        'logo_url': 'logoUrl',
        'city': 'city',
        'country': 'country',
        'postal_code': 'postalCode',
        'street_address': 'streetAddress',
        'company_number': 'companyNumber',
        'phone': 'phone',
        'website_url': 'websiteUrl',
        'global_payment_products': 'globalPaymentProducts',
        'supported_authorization_methods': 'supportedAuthorizationMethods',
        'affiliated_aspsps': 'affiliatedAspsps'
    }

    def __init__(self, bic_fi=None, name=None, logo_url=None, city=None, country=None, postal_code=None, street_address=None, company_number=None, phone=None, website_url=None, global_payment_products=None, supported_authorization_methods=None, affiliated_aspsps=None):  # noqa: E501
        """Aspsp - a model defined in Swagger"""  # noqa: E501
        self._bic_fi = None
        self._name = None
        self._logo_url = None
        self._city = None
        self._country = None
        self._postal_code = None
        self._street_address = None
        self._company_number = None
        self._phone = None
        self._website_url = None
        self._global_payment_products = None
        self._supported_authorization_methods = None
        self._affiliated_aspsps = None
        self.discriminator = None
        if bic_fi is not None:
            self.bic_fi = bic_fi
        if name is not None:
            self.name = name
        if logo_url is not None:
            self.logo_url = logo_url
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if postal_code is not None:
            self.postal_code = postal_code
        if street_address is not None:
            self.street_address = street_address
        if company_number is not None:
            self.company_number = company_number
        if phone is not None:
            self.phone = phone
        if website_url is not None:
            self.website_url = website_url
        if global_payment_products is not None:
            self.global_payment_products = global_payment_products
        if supported_authorization_methods is not None:
            self.supported_authorization_methods = supported_authorization_methods
        if affiliated_aspsps is not None:
            self.affiliated_aspsps = affiliated_aspsps

    @property
    def bic_fi(self):
        """Gets the bic_fi of this Aspsp.  # noqa: E501


        :return: The bic_fi of this Aspsp.  # noqa: E501
        :rtype: str
        """
        return self._bic_fi

    @bic_fi.setter
    def bic_fi(self, bic_fi):
        """Sets the bic_fi of this Aspsp.


        :param bic_fi: The bic_fi of this Aspsp.  # noqa: E501
        :type: str
        """

        self._bic_fi = bic_fi

    @property
    def name(self):
        """Gets the name of this Aspsp.  # noqa: E501


        :return: The name of this Aspsp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Aspsp.


        :param name: The name of this Aspsp.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def logo_url(self):
        """Gets the logo_url of this Aspsp.  # noqa: E501


        :return: The logo_url of this Aspsp.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Aspsp.


        :param logo_url: The logo_url of this Aspsp.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def city(self):
        """Gets the city of this Aspsp.  # noqa: E501


        :return: The city of this Aspsp.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Aspsp.


        :param city: The city of this Aspsp.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Aspsp.  # noqa: E501


        :return: The country of this Aspsp.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Aspsp.


        :param country: The country of this Aspsp.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this Aspsp.  # noqa: E501


        :return: The postal_code of this Aspsp.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Aspsp.


        :param postal_code: The postal_code of this Aspsp.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def street_address(self):
        """Gets the street_address of this Aspsp.  # noqa: E501


        :return: The street_address of this Aspsp.  # noqa: E501
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this Aspsp.


        :param street_address: The street_address of this Aspsp.  # noqa: E501
        :type: str
        """

        self._street_address = street_address

    @property
    def company_number(self):
        """Gets the company_number of this Aspsp.  # noqa: E501


        :return: The company_number of this Aspsp.  # noqa: E501
        :rtype: str
        """
        return self._company_number

    @company_number.setter
    def company_number(self, company_number):
        """Sets the company_number of this Aspsp.


        :param company_number: The company_number of this Aspsp.  # noqa: E501
        :type: str
        """

        self._company_number = company_number

    @property
    def phone(self):
        """Gets the phone of this Aspsp.  # noqa: E501


        :return: The phone of this Aspsp.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Aspsp.


        :param phone: The phone of this Aspsp.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def website_url(self):
        """Gets the website_url of this Aspsp.  # noqa: E501


        :return: The website_url of this Aspsp.  # noqa: E501
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this Aspsp.


        :param website_url: The website_url of this Aspsp.  # noqa: E501
        :type: str
        """

        self._website_url = website_url

    @property
    def global_payment_products(self):
        """Gets the global_payment_products of this Aspsp.  # noqa: E501


        :return: The global_payment_products of this Aspsp.  # noqa: E501
        :rtype: list[str]
        """
        return self._global_payment_products

    @global_payment_products.setter
    def global_payment_products(self, global_payment_products):
        """Sets the global_payment_products of this Aspsp.


        :param global_payment_products: The global_payment_products of this Aspsp.  # noqa: E501
        :type: list[str]
        """

        self._global_payment_products = global_payment_products

    @property
    def supported_authorization_methods(self):
        """Gets the supported_authorization_methods of this Aspsp.  # noqa: E501


        :return: The supported_authorization_methods of this Aspsp.  # noqa: E501
        :rtype: SupportedAuthorizationMethods
        """
        return self._supported_authorization_methods

    @supported_authorization_methods.setter
    def supported_authorization_methods(self, supported_authorization_methods):
        """Sets the supported_authorization_methods of this Aspsp.


        :param supported_authorization_methods: The supported_authorization_methods of this Aspsp.  # noqa: E501
        :type: SupportedAuthorizationMethods
        """

        self._supported_authorization_methods = supported_authorization_methods

    @property
    def affiliated_aspsps(self):
        """Gets the affiliated_aspsps of this Aspsp.  # noqa: E501


        :return: The affiliated_aspsps of this Aspsp.  # noqa: E501
        :rtype: AffiliatedAspsps
        """
        return self._affiliated_aspsps

    @affiliated_aspsps.setter
    def affiliated_aspsps(self, affiliated_aspsps):
        """Sets the affiliated_aspsps of this Aspsp.


        :param affiliated_aspsps: The affiliated_aspsps of this Aspsp.  # noqa: E501
        :type: AffiliatedAspsps
        """

        self._affiliated_aspsps = affiliated_aspsps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Aspsp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Aspsp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
