# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuthenticationObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication_type': 'AuthenticationType',
        'authentication_version': 'str',
        'authentication_method_id': 'AuthenticationMethodId',
        'name': 'str',
        'explanation': 'str'
    }

    attribute_map = {
        'authentication_type': 'authenticationType',
        'authentication_version': 'authenticationVersion',
        'authentication_method_id': 'authenticationMethodId',
        'name': 'name',
        'explanation': 'explanation'
    }

    def __init__(self, authentication_type=None, authentication_version=None, authentication_method_id=None, name=None, explanation=None):  # noqa: E501
        """AuthenticationObject - a model defined in Swagger"""  # noqa: E501
        self._authentication_type = None
        self._authentication_version = None
        self._authentication_method_id = None
        self._name = None
        self._explanation = None
        self.discriminator = None
        self.authentication_type = authentication_type
        if authentication_version is not None:
            self.authentication_version = authentication_version
        self.authentication_method_id = authentication_method_id
        if name is not None:
            self.name = name
        if explanation is not None:
            self.explanation = explanation

    @property
    def authentication_type(self):
        """Gets the authentication_type of this AuthenticationObject.  # noqa: E501


        :return: The authentication_type of this AuthenticationObject.  # noqa: E501
        :rtype: AuthenticationType
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this AuthenticationObject.


        :param authentication_type: The authentication_type of this AuthenticationObject.  # noqa: E501
        :type: AuthenticationType
        """
        if authentication_type is None:
            raise ValueError("Invalid value for `authentication_type`, must not be `None`")  # noqa: E501

        self._authentication_type = authentication_type

    @property
    def authentication_version(self):
        """Gets the authentication_version of this AuthenticationObject.  # noqa: E501

        Depending on the \"authenticationType\". This version can be used by differentiating authentication tools used within performing OTP generation in the same authentication type. This version can be referred to in the ASPSP?s documentation.   # noqa: E501

        :return: The authentication_version of this AuthenticationObject.  # noqa: E501
        :rtype: str
        """
        return self._authentication_version

    @authentication_version.setter
    def authentication_version(self, authentication_version):
        """Sets the authentication_version of this AuthenticationObject.

        Depending on the \"authenticationType\". This version can be used by differentiating authentication tools used within performing OTP generation in the same authentication type. This version can be referred to in the ASPSP?s documentation.   # noqa: E501

        :param authentication_version: The authentication_version of this AuthenticationObject.  # noqa: E501
        :type: str
        """

        self._authentication_version = authentication_version

    @property
    def authentication_method_id(self):
        """Gets the authentication_method_id of this AuthenticationObject.  # noqa: E501


        :return: The authentication_method_id of this AuthenticationObject.  # noqa: E501
        :rtype: AuthenticationMethodId
        """
        return self._authentication_method_id

    @authentication_method_id.setter
    def authentication_method_id(self, authentication_method_id):
        """Sets the authentication_method_id of this AuthenticationObject.


        :param authentication_method_id: The authentication_method_id of this AuthenticationObject.  # noqa: E501
        :type: AuthenticationMethodId
        """
        if authentication_method_id is None:
            raise ValueError("Invalid value for `authentication_method_id`, must not be `None`")  # noqa: E501

        self._authentication_method_id = authentication_method_id

    @property
    def name(self):
        """Gets the name of this AuthenticationObject.  # noqa: E501

        This is the name of the authentication method defined by the PSU in the Online Banking frontend of the ASPSP. Alternatively this could be a description provided by the ASPSP like \"SMS OTP on phone +49160 xxxxx 28\". This name shall be used by the TPP when presenting a list of authentication methods to the PSU, if available.   # noqa: E501

        :return: The name of this AuthenticationObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthenticationObject.

        This is the name of the authentication method defined by the PSU in the Online Banking frontend of the ASPSP. Alternatively this could be a description provided by the ASPSP like \"SMS OTP on phone +49160 xxxxx 28\". This name shall be used by the TPP when presenting a list of authentication methods to the PSU, if available.   # noqa: E501

        :param name: The name of this AuthenticationObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def explanation(self):
        """Gets the explanation of this AuthenticationObject.  # noqa: E501

        Detailed information about the SCA method for the PSU.   # noqa: E501

        :return: The explanation of this AuthenticationObject.  # noqa: E501
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this AuthenticationObject.

        Detailed information about the SCA method for the PSU.   # noqa: E501

        :param explanation: The explanation of this AuthenticationObject.  # noqa: E501
        :type: str
        """

        self._explanation = explanation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthenticationObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
