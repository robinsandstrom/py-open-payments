# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Balance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance_amount': 'Amount',
        'balance_type': 'BalanceType',
        'credit_limit_included': 'bool',
        'last_change_date_time': 'datetime',
        'reference_date': 'date',
        'last_committed_transaction': 'str',
        'clearing_number': 'ClearingNumber'
    }

    attribute_map = {
        'balance_amount': 'balanceAmount',
        'balance_type': 'balanceType',
        'credit_limit_included': 'creditLimitIncluded',
        'last_change_date_time': 'lastChangeDateTime',
        'reference_date': 'referenceDate',
        'last_committed_transaction': 'lastCommittedTransaction',
        'clearing_number': 'clearingNumber'
    }

    def __init__(self, balance_amount=None, balance_type=None, credit_limit_included=None, last_change_date_time=None, reference_date=None, last_committed_transaction=None, clearing_number=None):  # noqa: E501
        """Balance - a model defined in Swagger"""  # noqa: E501
        self._balance_amount = None
        self._balance_type = None
        self._credit_limit_included = None
        self._last_change_date_time = None
        self._reference_date = None
        self._last_committed_transaction = None
        self._clearing_number = None
        self.discriminator = None
        self.balance_amount = balance_amount
        self.balance_type = balance_type
        if credit_limit_included is not None:
            self.credit_limit_included = credit_limit_included
        if last_change_date_time is not None:
            self.last_change_date_time = last_change_date_time
        if reference_date is not None:
            self.reference_date = reference_date
        if last_committed_transaction is not None:
            self.last_committed_transaction = last_committed_transaction
        if clearing_number is not None:
            self.clearing_number = clearing_number

    @property
    def balance_amount(self):
        """Gets the balance_amount of this Balance.  # noqa: E501


        :return: The balance_amount of this Balance.  # noqa: E501
        :rtype: Amount
        """
        return self._balance_amount

    @balance_amount.setter
    def balance_amount(self, balance_amount):
        """Sets the balance_amount of this Balance.


        :param balance_amount: The balance_amount of this Balance.  # noqa: E501
        :type: Amount
        """
        if balance_amount is None:
            raise ValueError("Invalid value for `balance_amount`, must not be `None`")  # noqa: E501

        self._balance_amount = balance_amount

    @property
    def balance_type(self):
        """Gets the balance_type of this Balance.  # noqa: E501


        :return: The balance_type of this Balance.  # noqa: E501
        :rtype: BalanceType
        """
        return self._balance_type

    @balance_type.setter
    def balance_type(self, balance_type):
        """Sets the balance_type of this Balance.


        :param balance_type: The balance_type of this Balance.  # noqa: E501
        :type: BalanceType
        """
        if balance_type is None:
            raise ValueError("Invalid value for `balance_type`, must not be `None`")  # noqa: E501

        self._balance_type = balance_type

    @property
    def credit_limit_included(self):
        """Gets the credit_limit_included of this Balance.  # noqa: E501

        A flag indicating if the credit limit of the corresponding account  is included in the calculation of the balance, where applicable.   # noqa: E501

        :return: The credit_limit_included of this Balance.  # noqa: E501
        :rtype: bool
        """
        return self._credit_limit_included

    @credit_limit_included.setter
    def credit_limit_included(self, credit_limit_included):
        """Sets the credit_limit_included of this Balance.

        A flag indicating if the credit limit of the corresponding account  is included in the calculation of the balance, where applicable.   # noqa: E501

        :param credit_limit_included: The credit_limit_included of this Balance.  # noqa: E501
        :type: bool
        """

        self._credit_limit_included = credit_limit_included

    @property
    def last_change_date_time(self):
        """Gets the last_change_date_time of this Balance.  # noqa: E501

        This data element might be used to indicate e.g. with the expected or booked balance that no action is known  on the account, which is not yet booked.   # noqa: E501

        :return: The last_change_date_time of this Balance.  # noqa: E501
        :rtype: datetime
        """
        return self._last_change_date_time

    @last_change_date_time.setter
    def last_change_date_time(self, last_change_date_time):
        """Sets the last_change_date_time of this Balance.

        This data element might be used to indicate e.g. with the expected or booked balance that no action is known  on the account, which is not yet booked.   # noqa: E501

        :param last_change_date_time: The last_change_date_time of this Balance.  # noqa: E501
        :type: datetime
        """

        self._last_change_date_time = last_change_date_time

    @property
    def reference_date(self):
        """Gets the reference_date of this Balance.  # noqa: E501

        Reference date of the balance  # noqa: E501

        :return: The reference_date of this Balance.  # noqa: E501
        :rtype: date
        """
        return self._reference_date

    @reference_date.setter
    def reference_date(self, reference_date):
        """Sets the reference_date of this Balance.

        Reference date of the balance  # noqa: E501

        :param reference_date: The reference_date of this Balance.  # noqa: E501
        :type: date
        """

        self._reference_date = reference_date

    @property
    def last_committed_transaction(self):
        """Gets the last_committed_transaction of this Balance.  # noqa: E501

        \"entryReference\" of the last commited transaction to support the TPP in identifying whether all  PSU transactions are already known.   # noqa: E501

        :return: The last_committed_transaction of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._last_committed_transaction

    @last_committed_transaction.setter
    def last_committed_transaction(self, last_committed_transaction):
        """Sets the last_committed_transaction of this Balance.

        \"entryReference\" of the last commited transaction to support the TPP in identifying whether all  PSU transactions are already known.   # noqa: E501

        :param last_committed_transaction: The last_committed_transaction of this Balance.  # noqa: E501
        :type: str
        """

        self._last_committed_transaction = last_committed_transaction

    @property
    def clearing_number(self):
        """Gets the clearing_number of this Balance.  # noqa: E501


        :return: The clearing_number of this Balance.  # noqa: E501
        :rtype: ClearingNumber
        """
        return self._clearing_number

    @clearing_number.setter
    def clearing_number(self, clearing_number):
        """Sets the clearing_number of this Balance.


        :param clearing_number: The clearing_number of this Balance.  # noqa: E501
        :type: ClearingNumber
        """

        self._clearing_number = clearing_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Balance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Balance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
