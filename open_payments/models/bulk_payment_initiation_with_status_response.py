# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkPaymentInitiationWithStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_booking_preferred': 'BatchBookingPreferred',
        'requested_execution_date': 'date',
        'debtor_account': 'AccountReference',
        'payments': 'list[PaymentInitiationBulkElementJson]',
        'transaction_status': 'TransactionStatus',
        'tpp_messages': 'list[TppMessage2XX]'
    }

    attribute_map = {
        'batch_booking_preferred': 'batchBookingPreferred',
        'requested_execution_date': 'requestedExecutionDate',
        'debtor_account': 'debtorAccount',
        'payments': 'payments',
        'transaction_status': 'transactionStatus',
        'tpp_messages': 'tppMessages'
    }

    def __init__(self, batch_booking_preferred=None, requested_execution_date=None, debtor_account=None, payments=None, transaction_status=None, tpp_messages=None):  # noqa: E501
        """BulkPaymentInitiationWithStatusResponse - a model defined in Swagger"""  # noqa: E501
        self._batch_booking_preferred = None
        self._requested_execution_date = None
        self._debtor_account = None
        self._payments = None
        self._transaction_status = None
        self._tpp_messages = None
        self.discriminator = None
        if batch_booking_preferred is not None:
            self.batch_booking_preferred = batch_booking_preferred
        if requested_execution_date is not None:
            self.requested_execution_date = requested_execution_date
        self.debtor_account = debtor_account
        self.payments = payments
        if transaction_status is not None:
            self.transaction_status = transaction_status
        if tpp_messages is not None:
            self.tpp_messages = tpp_messages

    @property
    def batch_booking_preferred(self):
        """Gets the batch_booking_preferred of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The batch_booking_preferred of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: BatchBookingPreferred
        """
        return self._batch_booking_preferred

    @batch_booking_preferred.setter
    def batch_booking_preferred(self, batch_booking_preferred):
        """Sets the batch_booking_preferred of this BulkPaymentInitiationWithStatusResponse.


        :param batch_booking_preferred: The batch_booking_preferred of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: BatchBookingPreferred
        """

        self._batch_booking_preferred = batch_booking_preferred

    @property
    def requested_execution_date(self):
        """Gets the requested_execution_date of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The requested_execution_date of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: date
        """
        return self._requested_execution_date

    @requested_execution_date.setter
    def requested_execution_date(self, requested_execution_date):
        """Sets the requested_execution_date of this BulkPaymentInitiationWithStatusResponse.


        :param requested_execution_date: The requested_execution_date of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: date
        """

        self._requested_execution_date = requested_execution_date

    @property
    def debtor_account(self):
        """Gets the debtor_account of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The debtor_account of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: AccountReference
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this BulkPaymentInitiationWithStatusResponse.


        :param debtor_account: The debtor_account of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: AccountReference
        """
        if debtor_account is None:
            raise ValueError("Invalid value for `debtor_account`, must not be `None`")  # noqa: E501

        self._debtor_account = debtor_account

    @property
    def payments(self):
        """Gets the payments of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501

        A list of generic JSON bodies payment initations for bulk payments via JSON.  Note: Some fields from single payments do not occcur in a bulk payment element   # noqa: E501

        :return: The payments of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: list[PaymentInitiationBulkElementJson]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this BulkPaymentInitiationWithStatusResponse.

        A list of generic JSON bodies payment initations for bulk payments via JSON.  Note: Some fields from single payments do not occcur in a bulk payment element   # noqa: E501

        :param payments: The payments of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: list[PaymentInitiationBulkElementJson]
        """
        if payments is None:
            raise ValueError("Invalid value for `payments`, must not be `None`")  # noqa: E501

        self._payments = payments

    @property
    def transaction_status(self):
        """Gets the transaction_status of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The transaction_status of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: TransactionStatus
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this BulkPaymentInitiationWithStatusResponse.


        :param transaction_status: The transaction_status of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: TransactionStatus
        """

        self._transaction_status = transaction_status

    @property
    def tpp_messages(self):
        """Gets the tpp_messages of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The tpp_messages of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: list[TppMessage2XX]
        """
        return self._tpp_messages

    @tpp_messages.setter
    def tpp_messages(self, tpp_messages):
        """Sets the tpp_messages of this BulkPaymentInitiationWithStatusResponse.


        :param tpp_messages: The tpp_messages of this BulkPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: list[TppMessage2XX]
        """

        self._tpp_messages = tpp_messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkPaymentInitiationWithStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkPaymentInitiationWithStatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
