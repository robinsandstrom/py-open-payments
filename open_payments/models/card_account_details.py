# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CardAccountDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_id': 'str',
        'masked_pan': 'MaskedPan',
        'currency': 'CurrencyCode',
        'name': 'str',
        'product': 'str',
        'status': 'AccountStatus',
        'usage': 'str',
        'details': 'str',
        'credit_limit': 'Amount',
        'balances': 'BalanceList',
        'links': 'LinksAccountDetails'
    }

    attribute_map = {
        'resource_id': 'resourceId',
        'masked_pan': 'maskedPan',
        'currency': 'currency',
        'name': 'name',
        'product': 'product',
        'status': 'status',
        'usage': 'usage',
        'details': 'details',
        'credit_limit': 'creditLimit',
        'balances': 'balances',
        'links': '_links'
    }

    def __init__(self, resource_id=None, masked_pan=None, currency=None, name=None, product=None, status=None, usage=None, details=None, credit_limit=None, balances=None, links=None):  # noqa: E501
        """CardAccountDetails - a model defined in Swagger"""  # noqa: E501
        self._resource_id = None
        self._masked_pan = None
        self._currency = None
        self._name = None
        self._product = None
        self._status = None
        self._usage = None
        self._details = None
        self._credit_limit = None
        self._balances = None
        self._links = None
        self.discriminator = None
        if resource_id is not None:
            self.resource_id = resource_id
        self.masked_pan = masked_pan
        self.currency = currency
        if name is not None:
            self.name = name
        if product is not None:
            self.product = product
        if status is not None:
            self.status = status
        if usage is not None:
            self.usage = usage
        if details is not None:
            self.details = details
        if credit_limit is not None:
            self.credit_limit = credit_limit
        if balances is not None:
            self.balances = balances
        if links is not None:
            self.links = links

    @property
    def resource_id(self):
        """Gets the resource_id of this CardAccountDetails.  # noqa: E501

        This is the data element to be used in the path when retrieving data from a dedicated account. This shall be filled, if addressable resource are created by the ASPSP on the /card-accounts endpoint.   # noqa: E501

        :return: The resource_id of this CardAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this CardAccountDetails.

        This is the data element to be used in the path when retrieving data from a dedicated account. This shall be filled, if addressable resource are created by the ASPSP on the /card-accounts endpoint.   # noqa: E501

        :param resource_id: The resource_id of this CardAccountDetails.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def masked_pan(self):
        """Gets the masked_pan of this CardAccountDetails.  # noqa: E501


        :return: The masked_pan of this CardAccountDetails.  # noqa: E501
        :rtype: MaskedPan
        """
        return self._masked_pan

    @masked_pan.setter
    def masked_pan(self, masked_pan):
        """Sets the masked_pan of this CardAccountDetails.


        :param masked_pan: The masked_pan of this CardAccountDetails.  # noqa: E501
        :type: MaskedPan
        """
        if masked_pan is None:
            raise ValueError("Invalid value for `masked_pan`, must not be `None`")  # noqa: E501

        self._masked_pan = masked_pan

    @property
    def currency(self):
        """Gets the currency of this CardAccountDetails.  # noqa: E501


        :return: The currency of this CardAccountDetails.  # noqa: E501
        :rtype: CurrencyCode
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CardAccountDetails.


        :param currency: The currency of this CardAccountDetails.  # noqa: E501
        :type: CurrencyCode
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def name(self):
        """Gets the name of this CardAccountDetails.  # noqa: E501

        Name of the account given by the bank or the PSU in online-banking.  # noqa: E501

        :return: The name of this CardAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CardAccountDetails.

        Name of the account given by the bank or the PSU in online-banking.  # noqa: E501

        :param name: The name of this CardAccountDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def product(self):
        """Gets the product of this CardAccountDetails.  # noqa: E501

        Product name of the bank for this account, proprietary definition.  # noqa: E501

        :return: The product of this CardAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this CardAccountDetails.

        Product name of the bank for this account, proprietary definition.  # noqa: E501

        :param product: The product of this CardAccountDetails.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def status(self):
        """Gets the status of this CardAccountDetails.  # noqa: E501


        :return: The status of this CardAccountDetails.  # noqa: E501
        :rtype: AccountStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CardAccountDetails.


        :param status: The status of this CardAccountDetails.  # noqa: E501
        :type: AccountStatus
        """

        self._status = status

    @property
    def usage(self):
        """Gets the usage of this CardAccountDetails.  # noqa: E501

        Specifies the usage of the account   * PRIV: private personal account   * ORGA: professional account   # noqa: E501

        :return: The usage of this CardAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this CardAccountDetails.

        Specifies the usage of the account   * PRIV: private personal account   * ORGA: professional account   # noqa: E501

        :param usage: The usage of this CardAccountDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRIV", "ORGA"]  # noqa: E501
        if usage not in allowed_values:
            raise ValueError(
                "Invalid value for `usage` ({0}), must be one of {1}"  # noqa: E501
                .format(usage, allowed_values)
            )

        self._usage = usage

    @property
    def details(self):
        """Gets the details of this CardAccountDetails.  # noqa: E501

        Specifications that might be provided by the ASPSP   - characteristics of the account   - characteristics of the relevant card   # noqa: E501

        :return: The details of this CardAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this CardAccountDetails.

        Specifications that might be provided by the ASPSP   - characteristics of the account   - characteristics of the relevant card   # noqa: E501

        :param details: The details of this CardAccountDetails.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def credit_limit(self):
        """Gets the credit_limit of this CardAccountDetails.  # noqa: E501


        :return: The credit_limit of this CardAccountDetails.  # noqa: E501
        :rtype: Amount
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this CardAccountDetails.


        :param credit_limit: The credit_limit of this CardAccountDetails.  # noqa: E501
        :type: Amount
        """

        self._credit_limit = credit_limit

    @property
    def balances(self):
        """Gets the balances of this CardAccountDetails.  # noqa: E501


        :return: The balances of this CardAccountDetails.  # noqa: E501
        :rtype: BalanceList
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this CardAccountDetails.


        :param balances: The balances of this CardAccountDetails.  # noqa: E501
        :type: BalanceList
        """

        self._balances = balances

    @property
    def links(self):
        """Gets the links of this CardAccountDetails.  # noqa: E501


        :return: The links of this CardAccountDetails.  # noqa: E501
        :rtype: LinksAccountDetails
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CardAccountDetails.


        :param links: The links of this CardAccountDetails.  # noqa: E501
        :type: LinksAccountDetails
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardAccountDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardAccountDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
