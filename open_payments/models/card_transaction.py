# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CardTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_transaction_id': 'CardTransactionId',
        'terminal_id': 'TerminalId',
        'transaction_date': 'TransactionDate',
        'booking_date': 'BookingDate',
        'transaction_amount': 'Amount',
        'currency_exchange': 'ReportExchangeRateList',
        'original_amount': 'Amount',
        'markup_fee': 'Amount',
        'markup_fee_percentage': 'str',
        'card_acceptor_id': 'str',
        'card_acceptor_address': 'Address',
        'merchant_category_code': 'MerchantCategoryCode',
        'masked_pan': 'MaskedPan',
        'transaction_details': 'str',
        'invoiced': 'bool',
        'proprietary_bank_transaction_code': 'ProprietaryBankTransactionCode'
    }

    attribute_map = {
        'card_transaction_id': 'cardTransactionId',
        'terminal_id': 'terminalId',
        'transaction_date': 'transactionDate',
        'booking_date': 'bookingDate',
        'transaction_amount': 'transactionAmount',
        'currency_exchange': 'currencyExchange',
        'original_amount': 'originalAmount',
        'markup_fee': 'markupFee',
        'markup_fee_percentage': 'markupFeePercentage',
        'card_acceptor_id': 'cardAcceptorId',
        'card_acceptor_address': 'cardAcceptorAddress',
        'merchant_category_code': 'merchantCategoryCode',
        'masked_pan': 'maskedPAN',
        'transaction_details': 'transactionDetails',
        'invoiced': 'invoiced',
        'proprietary_bank_transaction_code': 'proprietaryBankTransactionCode'
    }

    def __init__(self, card_transaction_id=None, terminal_id=None, transaction_date=None, booking_date=None, transaction_amount=None, currency_exchange=None, original_amount=None, markup_fee=None, markup_fee_percentage=None, card_acceptor_id=None, card_acceptor_address=None, merchant_category_code=None, masked_pan=None, transaction_details=None, invoiced=None, proprietary_bank_transaction_code=None):  # noqa: E501
        """CardTransaction - a model defined in Swagger"""  # noqa: E501
        self._card_transaction_id = None
        self._terminal_id = None
        self._transaction_date = None
        self._booking_date = None
        self._transaction_amount = None
        self._currency_exchange = None
        self._original_amount = None
        self._markup_fee = None
        self._markup_fee_percentage = None
        self._card_acceptor_id = None
        self._card_acceptor_address = None
        self._merchant_category_code = None
        self._masked_pan = None
        self._transaction_details = None
        self._invoiced = None
        self._proprietary_bank_transaction_code = None
        self.discriminator = None
        if card_transaction_id is not None:
            self.card_transaction_id = card_transaction_id
        if terminal_id is not None:
            self.terminal_id = terminal_id
        if transaction_date is not None:
            self.transaction_date = transaction_date
        if booking_date is not None:
            self.booking_date = booking_date
        self.transaction_amount = transaction_amount
        if currency_exchange is not None:
            self.currency_exchange = currency_exchange
        if original_amount is not None:
            self.original_amount = original_amount
        if markup_fee is not None:
            self.markup_fee = markup_fee
        if markup_fee_percentage is not None:
            self.markup_fee_percentage = markup_fee_percentage
        if card_acceptor_id is not None:
            self.card_acceptor_id = card_acceptor_id
        if card_acceptor_address is not None:
            self.card_acceptor_address = card_acceptor_address
        if merchant_category_code is not None:
            self.merchant_category_code = merchant_category_code
        if masked_pan is not None:
            self.masked_pan = masked_pan
        if transaction_details is not None:
            self.transaction_details = transaction_details
        if invoiced is not None:
            self.invoiced = invoiced
        if proprietary_bank_transaction_code is not None:
            self.proprietary_bank_transaction_code = proprietary_bank_transaction_code

    @property
    def card_transaction_id(self):
        """Gets the card_transaction_id of this CardTransaction.  # noqa: E501


        :return: The card_transaction_id of this CardTransaction.  # noqa: E501
        :rtype: CardTransactionId
        """
        return self._card_transaction_id

    @card_transaction_id.setter
    def card_transaction_id(self, card_transaction_id):
        """Sets the card_transaction_id of this CardTransaction.


        :param card_transaction_id: The card_transaction_id of this CardTransaction.  # noqa: E501
        :type: CardTransactionId
        """

        self._card_transaction_id = card_transaction_id

    @property
    def terminal_id(self):
        """Gets the terminal_id of this CardTransaction.  # noqa: E501


        :return: The terminal_id of this CardTransaction.  # noqa: E501
        :rtype: TerminalId
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this CardTransaction.


        :param terminal_id: The terminal_id of this CardTransaction.  # noqa: E501
        :type: TerminalId
        """

        self._terminal_id = terminal_id

    @property
    def transaction_date(self):
        """Gets the transaction_date of this CardTransaction.  # noqa: E501


        :return: The transaction_date of this CardTransaction.  # noqa: E501
        :rtype: TransactionDate
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this CardTransaction.


        :param transaction_date: The transaction_date of this CardTransaction.  # noqa: E501
        :type: TransactionDate
        """

        self._transaction_date = transaction_date

    @property
    def booking_date(self):
        """Gets the booking_date of this CardTransaction.  # noqa: E501


        :return: The booking_date of this CardTransaction.  # noqa: E501
        :rtype: BookingDate
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this CardTransaction.


        :param booking_date: The booking_date of this CardTransaction.  # noqa: E501
        :type: BookingDate
        """

        self._booking_date = booking_date

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this CardTransaction.  # noqa: E501


        :return: The transaction_amount of this CardTransaction.  # noqa: E501
        :rtype: Amount
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this CardTransaction.


        :param transaction_amount: The transaction_amount of this CardTransaction.  # noqa: E501
        :type: Amount
        """
        if transaction_amount is None:
            raise ValueError("Invalid value for `transaction_amount`, must not be `None`")  # noqa: E501

        self._transaction_amount = transaction_amount

    @property
    def currency_exchange(self):
        """Gets the currency_exchange of this CardTransaction.  # noqa: E501


        :return: The currency_exchange of this CardTransaction.  # noqa: E501
        :rtype: ReportExchangeRateList
        """
        return self._currency_exchange

    @currency_exchange.setter
    def currency_exchange(self, currency_exchange):
        """Sets the currency_exchange of this CardTransaction.


        :param currency_exchange: The currency_exchange of this CardTransaction.  # noqa: E501
        :type: ReportExchangeRateList
        """

        self._currency_exchange = currency_exchange

    @property
    def original_amount(self):
        """Gets the original_amount of this CardTransaction.  # noqa: E501


        :return: The original_amount of this CardTransaction.  # noqa: E501
        :rtype: Amount
        """
        return self._original_amount

    @original_amount.setter
    def original_amount(self, original_amount):
        """Sets the original_amount of this CardTransaction.


        :param original_amount: The original_amount of this CardTransaction.  # noqa: E501
        :type: Amount
        """

        self._original_amount = original_amount

    @property
    def markup_fee(self):
        """Gets the markup_fee of this CardTransaction.  # noqa: E501


        :return: The markup_fee of this CardTransaction.  # noqa: E501
        :rtype: Amount
        """
        return self._markup_fee

    @markup_fee.setter
    def markup_fee(self, markup_fee):
        """Sets the markup_fee of this CardTransaction.


        :param markup_fee: The markup_fee of this CardTransaction.  # noqa: E501
        :type: Amount
        """

        self._markup_fee = markup_fee

    @property
    def markup_fee_percentage(self):
        """Gets the markup_fee_percentage of this CardTransaction.  # noqa: E501


        :return: The markup_fee_percentage of this CardTransaction.  # noqa: E501
        :rtype: str
        """
        return self._markup_fee_percentage

    @markup_fee_percentage.setter
    def markup_fee_percentage(self, markup_fee_percentage):
        """Sets the markup_fee_percentage of this CardTransaction.


        :param markup_fee_percentage: The markup_fee_percentage of this CardTransaction.  # noqa: E501
        :type: str
        """

        self._markup_fee_percentage = markup_fee_percentage

    @property
    def card_acceptor_id(self):
        """Gets the card_acceptor_id of this CardTransaction.  # noqa: E501


        :return: The card_acceptor_id of this CardTransaction.  # noqa: E501
        :rtype: str
        """
        return self._card_acceptor_id

    @card_acceptor_id.setter
    def card_acceptor_id(self, card_acceptor_id):
        """Sets the card_acceptor_id of this CardTransaction.


        :param card_acceptor_id: The card_acceptor_id of this CardTransaction.  # noqa: E501
        :type: str
        """

        self._card_acceptor_id = card_acceptor_id

    @property
    def card_acceptor_address(self):
        """Gets the card_acceptor_address of this CardTransaction.  # noqa: E501


        :return: The card_acceptor_address of this CardTransaction.  # noqa: E501
        :rtype: Address
        """
        return self._card_acceptor_address

    @card_acceptor_address.setter
    def card_acceptor_address(self, card_acceptor_address):
        """Sets the card_acceptor_address of this CardTransaction.


        :param card_acceptor_address: The card_acceptor_address of this CardTransaction.  # noqa: E501
        :type: Address
        """

        self._card_acceptor_address = card_acceptor_address

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this CardTransaction.  # noqa: E501


        :return: The merchant_category_code of this CardTransaction.  # noqa: E501
        :rtype: MerchantCategoryCode
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this CardTransaction.


        :param merchant_category_code: The merchant_category_code of this CardTransaction.  # noqa: E501
        :type: MerchantCategoryCode
        """

        self._merchant_category_code = merchant_category_code

    @property
    def masked_pan(self):
        """Gets the masked_pan of this CardTransaction.  # noqa: E501


        :return: The masked_pan of this CardTransaction.  # noqa: E501
        :rtype: MaskedPan
        """
        return self._masked_pan

    @masked_pan.setter
    def masked_pan(self, masked_pan):
        """Sets the masked_pan of this CardTransaction.


        :param masked_pan: The masked_pan of this CardTransaction.  # noqa: E501
        :type: MaskedPan
        """

        self._masked_pan = masked_pan

    @property
    def transaction_details(self):
        """Gets the transaction_details of this CardTransaction.  # noqa: E501


        :return: The transaction_details of this CardTransaction.  # noqa: E501
        :rtype: str
        """
        return self._transaction_details

    @transaction_details.setter
    def transaction_details(self, transaction_details):
        """Sets the transaction_details of this CardTransaction.


        :param transaction_details: The transaction_details of this CardTransaction.  # noqa: E501
        :type: str
        """

        self._transaction_details = transaction_details

    @property
    def invoiced(self):
        """Gets the invoiced of this CardTransaction.  # noqa: E501


        :return: The invoiced of this CardTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._invoiced

    @invoiced.setter
    def invoiced(self, invoiced):
        """Sets the invoiced of this CardTransaction.


        :param invoiced: The invoiced of this CardTransaction.  # noqa: E501
        :type: bool
        """

        self._invoiced = invoiced

    @property
    def proprietary_bank_transaction_code(self):
        """Gets the proprietary_bank_transaction_code of this CardTransaction.  # noqa: E501


        :return: The proprietary_bank_transaction_code of this CardTransaction.  # noqa: E501
        :rtype: ProprietaryBankTransactionCode
        """
        return self._proprietary_bank_transaction_code

    @proprietary_bank_transaction_code.setter
    def proprietary_bank_transaction_code(self, proprietary_bank_transaction_code):
        """Sets the proprietary_bank_transaction_code of this CardTransaction.


        :param proprietary_bank_transaction_code: The proprietary_bank_transaction_code of this CardTransaction.  # noqa: E501
        :type: ProprietaryBankTransactionCode
        """

        self._proprietary_bank_transaction_code = proprietary_bank_transaction_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
