# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChallengeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image': 'str',
        'data': 'str',
        'image_link': 'str',
        'otp_max_length': 'int',
        'otp_format': 'str',
        'additional_information': 'str'
    }

    attribute_map = {
        'image': 'image',
        'data': 'data',
        'image_link': 'imageLink',
        'otp_max_length': 'otpMaxLength',
        'otp_format': 'otpFormat',
        'additional_information': 'additionalInformation'
    }

    def __init__(self, image=None, data=None, image_link=None, otp_max_length=None, otp_format=None, additional_information=None):  # noqa: E501
        """ChallengeData - a model defined in Swagger"""  # noqa: E501
        self._image = None
        self._data = None
        self._image_link = None
        self._otp_max_length = None
        self._otp_format = None
        self._additional_information = None
        self.discriminator = None
        if image is not None:
            self.image = image
        if data is not None:
            self.data = data
        if image_link is not None:
            self.image_link = image_link
        if otp_max_length is not None:
            self.otp_max_length = otp_max_length
        if otp_format is not None:
            self.otp_format = otp_format
        if additional_information is not None:
            self.additional_information = additional_information

    @property
    def image(self):
        """Gets the image of this ChallengeData.  # noqa: E501

        PNG data (max. 512 kilobyte) to be displayed to the PSU, Base64 encoding, cp. [RFC4648]. This attribute is used only, when PHOTO_OTP or CHIP_OTP is the selected SCA method.   # noqa: E501

        :return: The image of this ChallengeData.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ChallengeData.

        PNG data (max. 512 kilobyte) to be displayed to the PSU, Base64 encoding, cp. [RFC4648]. This attribute is used only, when PHOTO_OTP or CHIP_OTP is the selected SCA method.   # noqa: E501

        :param image: The image of this ChallengeData.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def data(self):
        """Gets the data of this ChallengeData.  # noqa: E501

        String challenge data  # noqa: E501

        :return: The data of this ChallengeData.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ChallengeData.

        String challenge data  # noqa: E501

        :param data: The data of this ChallengeData.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def image_link(self):
        """Gets the image_link of this ChallengeData.  # noqa: E501

        A link where the ASPSP will provides the challenge image for the TPP.  # noqa: E501

        :return: The image_link of this ChallengeData.  # noqa: E501
        :rtype: str
        """
        return self._image_link

    @image_link.setter
    def image_link(self, image_link):
        """Sets the image_link of this ChallengeData.

        A link where the ASPSP will provides the challenge image for the TPP.  # noqa: E501

        :param image_link: The image_link of this ChallengeData.  # noqa: E501
        :type: str
        """

        self._image_link = image_link

    @property
    def otp_max_length(self):
        """Gets the otp_max_length of this ChallengeData.  # noqa: E501

        The maximal length for the OTP to be typed in by the PSU.  # noqa: E501

        :return: The otp_max_length of this ChallengeData.  # noqa: E501
        :rtype: int
        """
        return self._otp_max_length

    @otp_max_length.setter
    def otp_max_length(self, otp_max_length):
        """Sets the otp_max_length of this ChallengeData.

        The maximal length for the OTP to be typed in by the PSU.  # noqa: E501

        :param otp_max_length: The otp_max_length of this ChallengeData.  # noqa: E501
        :type: int
        """

        self._otp_max_length = otp_max_length

    @property
    def otp_format(self):
        """Gets the otp_format of this ChallengeData.  # noqa: E501

        The format type of the OTP to be typed in. The admitted values are \"characters\" or \"integer\".  # noqa: E501

        :return: The otp_format of this ChallengeData.  # noqa: E501
        :rtype: str
        """
        return self._otp_format

    @otp_format.setter
    def otp_format(self, otp_format):
        """Sets the otp_format of this ChallengeData.

        The format type of the OTP to be typed in. The admitted values are \"characters\" or \"integer\".  # noqa: E501

        :param otp_format: The otp_format of this ChallengeData.  # noqa: E501
        :type: str
        """
        allowed_values = ["characters", "integer"]  # noqa: E501
        if otp_format not in allowed_values:
            raise ValueError(
                "Invalid value for `otp_format` ({0}), must be one of {1}"  # noqa: E501
                .format(otp_format, allowed_values)
            )

        self._otp_format = otp_format

    @property
    def additional_information(self):
        """Gets the additional_information of this ChallengeData.  # noqa: E501

        Additional explanation for the PSU to explain e.g. fallback mechanism for the chosen SCA method. The TPP is obliged to show this to the PSU.   # noqa: E501

        :return: The additional_information of this ChallengeData.  # noqa: E501
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this ChallengeData.

        Additional explanation for the PSU to explain e.g. fallback mechanism for the chosen SCA method. The TPP is obliged to show this to the PSU.   # noqa: E501

        :param additional_information: The additional_information of this ChallengeData.  # noqa: E501
        :type: str
        """

        self._additional_information = additional_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChallengeData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChallengeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
