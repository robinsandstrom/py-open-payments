# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsentInformationResponse200Json(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access': 'AccountAccess',
        'recurring_indicator': 'RecurringIndicator',
        'valid_until': 'ValidUntil',
        'frequency_per_day': 'FrequencyPerDay',
        'last_action_date': 'LastActionDate',
        'consent_status': 'ConsentStatus',
        'links': 'LinksGetConsent',
        'tpp_messages': 'list[TppMessage2XX]'
    }

    attribute_map = {
        'access': 'access',
        'recurring_indicator': 'recurringIndicator',
        'valid_until': 'validUntil',
        'frequency_per_day': 'frequencyPerDay',
        'last_action_date': 'lastActionDate',
        'consent_status': 'consentStatus',
        'links': '_links',
        'tpp_messages': 'tppMessages'
    }

    def __init__(self, access=None, recurring_indicator=None, valid_until=None, frequency_per_day=None, last_action_date=None, consent_status=None, links=None, tpp_messages=None):  # noqa: E501
        """ConsentInformationResponse200Json - a model defined in Swagger"""  # noqa: E501
        self._access = None
        self._recurring_indicator = None
        self._valid_until = None
        self._frequency_per_day = None
        self._last_action_date = None
        self._consent_status = None
        self._links = None
        self._tpp_messages = None
        self.discriminator = None
        self.access = access
        self.recurring_indicator = recurring_indicator
        self.valid_until = valid_until
        self.frequency_per_day = frequency_per_day
        self.last_action_date = last_action_date
        self.consent_status = consent_status
        if links is not None:
            self.links = links
        if tpp_messages is not None:
            self.tpp_messages = tpp_messages

    @property
    def access(self):
        """Gets the access of this ConsentInformationResponse200Json.  # noqa: E501


        :return: The access of this ConsentInformationResponse200Json.  # noqa: E501
        :rtype: AccountAccess
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this ConsentInformationResponse200Json.


        :param access: The access of this ConsentInformationResponse200Json.  # noqa: E501
        :type: AccountAccess
        """
        if access is None:
            raise ValueError("Invalid value for `access`, must not be `None`")  # noqa: E501

        self._access = access

    @property
    def recurring_indicator(self):
        """Gets the recurring_indicator of this ConsentInformationResponse200Json.  # noqa: E501


        :return: The recurring_indicator of this ConsentInformationResponse200Json.  # noqa: E501
        :rtype: RecurringIndicator
        """
        return self._recurring_indicator

    @recurring_indicator.setter
    def recurring_indicator(self, recurring_indicator):
        """Sets the recurring_indicator of this ConsentInformationResponse200Json.


        :param recurring_indicator: The recurring_indicator of this ConsentInformationResponse200Json.  # noqa: E501
        :type: RecurringIndicator
        """
        if recurring_indicator is None:
            raise ValueError("Invalid value for `recurring_indicator`, must not be `None`")  # noqa: E501

        self._recurring_indicator = recurring_indicator

    @property
    def valid_until(self):
        """Gets the valid_until of this ConsentInformationResponse200Json.  # noqa: E501


        :return: The valid_until of this ConsentInformationResponse200Json.  # noqa: E501
        :rtype: ValidUntil
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this ConsentInformationResponse200Json.


        :param valid_until: The valid_until of this ConsentInformationResponse200Json.  # noqa: E501
        :type: ValidUntil
        """
        if valid_until is None:
            raise ValueError("Invalid value for `valid_until`, must not be `None`")  # noqa: E501

        self._valid_until = valid_until

    @property
    def frequency_per_day(self):
        """Gets the frequency_per_day of this ConsentInformationResponse200Json.  # noqa: E501


        :return: The frequency_per_day of this ConsentInformationResponse200Json.  # noqa: E501
        :rtype: FrequencyPerDay
        """
        return self._frequency_per_day

    @frequency_per_day.setter
    def frequency_per_day(self, frequency_per_day):
        """Sets the frequency_per_day of this ConsentInformationResponse200Json.


        :param frequency_per_day: The frequency_per_day of this ConsentInformationResponse200Json.  # noqa: E501
        :type: FrequencyPerDay
        """
        if frequency_per_day is None:
            raise ValueError("Invalid value for `frequency_per_day`, must not be `None`")  # noqa: E501

        self._frequency_per_day = frequency_per_day

    @property
    def last_action_date(self):
        """Gets the last_action_date of this ConsentInformationResponse200Json.  # noqa: E501


        :return: The last_action_date of this ConsentInformationResponse200Json.  # noqa: E501
        :rtype: LastActionDate
        """
        return self._last_action_date

    @last_action_date.setter
    def last_action_date(self, last_action_date):
        """Sets the last_action_date of this ConsentInformationResponse200Json.


        :param last_action_date: The last_action_date of this ConsentInformationResponse200Json.  # noqa: E501
        :type: LastActionDate
        """
        if last_action_date is None:
            raise ValueError("Invalid value for `last_action_date`, must not be `None`")  # noqa: E501

        self._last_action_date = last_action_date

    @property
    def consent_status(self):
        """Gets the consent_status of this ConsentInformationResponse200Json.  # noqa: E501


        :return: The consent_status of this ConsentInformationResponse200Json.  # noqa: E501
        :rtype: ConsentStatus
        """
        return self._consent_status

    @consent_status.setter
    def consent_status(self, consent_status):
        """Sets the consent_status of this ConsentInformationResponse200Json.


        :param consent_status: The consent_status of this ConsentInformationResponse200Json.  # noqa: E501
        :type: ConsentStatus
        """
        if consent_status is None:
            raise ValueError("Invalid value for `consent_status`, must not be `None`")  # noqa: E501

        self._consent_status = consent_status

    @property
    def links(self):
        """Gets the links of this ConsentInformationResponse200Json.  # noqa: E501


        :return: The links of this ConsentInformationResponse200Json.  # noqa: E501
        :rtype: LinksGetConsent
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ConsentInformationResponse200Json.


        :param links: The links of this ConsentInformationResponse200Json.  # noqa: E501
        :type: LinksGetConsent
        """

        self._links = links

    @property
    def tpp_messages(self):
        """Gets the tpp_messages of this ConsentInformationResponse200Json.  # noqa: E501


        :return: The tpp_messages of this ConsentInformationResponse200Json.  # noqa: E501
        :rtype: list[TppMessage2XX]
        """
        return self._tpp_messages

    @tpp_messages.setter
    def tpp_messages(self, tpp_messages):
        """Sets the tpp_messages of this ConsentInformationResponse200Json.


        :param tpp_messages: The tpp_messages of this ConsentInformationResponse200Json.  # noqa: E501
        :type: list[TppMessage2XX]
        """

        self._tpp_messages = tpp_messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsentInformationResponse200Json, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsentInformationResponse200Json):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
