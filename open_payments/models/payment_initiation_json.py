# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentInitiationJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_to_end_identification': 'str',
        'debtor_account': 'AccountReferenceWithGiro',
        'instructed_amount': 'Amount',
        'creditor_account': 'AccountReference',
        'creditor_agent': 'Bicfi',
        'creditor_agent_name': 'CreditorAgentName',
        'creditor_name': 'CreditorName',
        'creditor_address': 'Address',
        'remittance_information_unstructured': 'RemittanceInformationUnstructured',
        'requested_execution_date': 'str'
    }

    attribute_map = {
        'end_to_end_identification': 'endToEndIdentification',
        'debtor_account': 'debtorAccount',
        'instructed_amount': 'instructedAmount',
        'creditor_account': 'creditorAccount',
        'creditor_agent': 'creditorAgent',
        'creditor_agent_name': 'creditorAgentName',
        'creditor_name': 'creditorName',
        'creditor_address': 'creditorAddress',
        'remittance_information_unstructured': 'remittanceInformationUnstructured',
        'requested_execution_date': 'requestedExecutionDate'
    }

    def __init__(self, end_to_end_identification=None, debtor_account=None, instructed_amount=None, creditor_account=None, creditor_agent=None, creditor_agent_name=None, creditor_name=None, creditor_address=None, remittance_information_unstructured=None, requested_execution_date=None):  # noqa: E501
        """PaymentInitiationJson - a model defined in Swagger"""  # noqa: E501
        self._end_to_end_identification = None
        self._debtor_account = None
        self._instructed_amount = None
        self._creditor_account = None
        self._creditor_agent = None
        self._creditor_agent_name = None
        self._creditor_name = None
        self._creditor_address = None
        self._remittance_information_unstructured = None
        self._requested_execution_date = None
        self.discriminator = None
        if end_to_end_identification is not None:
            self.end_to_end_identification = end_to_end_identification
        self.debtor_account = debtor_account
        self.instructed_amount = instructed_amount
        self.creditor_account = creditor_account
        if creditor_agent is not None:
            self.creditor_agent = creditor_agent
        if creditor_agent_name is not None:
            self.creditor_agent_name = creditor_agent_name
        self.creditor_name = creditor_name
        if creditor_address is not None:
            self.creditor_address = creditor_address
        if remittance_information_unstructured is not None:
            self.remittance_information_unstructured = remittance_information_unstructured
        if requested_execution_date is not None:
            self.requested_execution_date = requested_execution_date

    @property
    def end_to_end_identification(self):
        """Gets the end_to_end_identification of this PaymentInitiationJson.  # noqa: E501


        :return: The end_to_end_identification of this PaymentInitiationJson.  # noqa: E501
        :rtype: str
        """
        return self._end_to_end_identification

    @end_to_end_identification.setter
    def end_to_end_identification(self, end_to_end_identification):
        """Sets the end_to_end_identification of this PaymentInitiationJson.


        :param end_to_end_identification: The end_to_end_identification of this PaymentInitiationJson.  # noqa: E501
        :type: str
        """

        self._end_to_end_identification = end_to_end_identification

    @property
    def debtor_account(self):
        """Gets the debtor_account of this PaymentInitiationJson.  # noqa: E501


        :return: The debtor_account of this PaymentInitiationJson.  # noqa: E501
        :rtype: AccountReferenceWithGiro
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this PaymentInitiationJson.


        :param debtor_account: The debtor_account of this PaymentInitiationJson.  # noqa: E501
        :type: AccountReferenceWithGiro
        """
        if debtor_account is None:
            raise ValueError("Invalid value for `debtor_account`, must not be `None`")  # noqa: E501

        self._debtor_account = debtor_account

    @property
    def instructed_amount(self):
        """Gets the instructed_amount of this PaymentInitiationJson.  # noqa: E501


        :return: The instructed_amount of this PaymentInitiationJson.  # noqa: E501
        :rtype: Amount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount):
        """Sets the instructed_amount of this PaymentInitiationJson.


        :param instructed_amount: The instructed_amount of this PaymentInitiationJson.  # noqa: E501
        :type: Amount
        """
        if instructed_amount is None:
            raise ValueError("Invalid value for `instructed_amount`, must not be `None`")  # noqa: E501

        self._instructed_amount = instructed_amount

    @property
    def creditor_account(self):
        """Gets the creditor_account of this PaymentInitiationJson.  # noqa: E501


        :return: The creditor_account of this PaymentInitiationJson.  # noqa: E501
        :rtype: AccountReference
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this PaymentInitiationJson.


        :param creditor_account: The creditor_account of this PaymentInitiationJson.  # noqa: E501
        :type: AccountReference
        """
        if creditor_account is None:
            raise ValueError("Invalid value for `creditor_account`, must not be `None`")  # noqa: E501

        self._creditor_account = creditor_account

    @property
    def creditor_agent(self):
        """Gets the creditor_agent of this PaymentInitiationJson.  # noqa: E501


        :return: The creditor_agent of this PaymentInitiationJson.  # noqa: E501
        :rtype: Bicfi
        """
        return self._creditor_agent

    @creditor_agent.setter
    def creditor_agent(self, creditor_agent):
        """Sets the creditor_agent of this PaymentInitiationJson.


        :param creditor_agent: The creditor_agent of this PaymentInitiationJson.  # noqa: E501
        :type: Bicfi
        """

        self._creditor_agent = creditor_agent

    @property
    def creditor_agent_name(self):
        """Gets the creditor_agent_name of this PaymentInitiationJson.  # noqa: E501


        :return: The creditor_agent_name of this PaymentInitiationJson.  # noqa: E501
        :rtype: CreditorAgentName
        """
        return self._creditor_agent_name

    @creditor_agent_name.setter
    def creditor_agent_name(self, creditor_agent_name):
        """Sets the creditor_agent_name of this PaymentInitiationJson.


        :param creditor_agent_name: The creditor_agent_name of this PaymentInitiationJson.  # noqa: E501
        :type: CreditorAgentName
        """

        self._creditor_agent_name = creditor_agent_name

    @property
    def creditor_name(self):
        """Gets the creditor_name of this PaymentInitiationJson.  # noqa: E501


        :return: The creditor_name of this PaymentInitiationJson.  # noqa: E501
        :rtype: CreditorName
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name):
        """Sets the creditor_name of this PaymentInitiationJson.


        :param creditor_name: The creditor_name of this PaymentInitiationJson.  # noqa: E501
        :type: CreditorName
        """
        if creditor_name is None:
            raise ValueError("Invalid value for `creditor_name`, must not be `None`")  # noqa: E501

        self._creditor_name = creditor_name

    @property
    def creditor_address(self):
        """Gets the creditor_address of this PaymentInitiationJson.  # noqa: E501


        :return: The creditor_address of this PaymentInitiationJson.  # noqa: E501
        :rtype: Address
        """
        return self._creditor_address

    @creditor_address.setter
    def creditor_address(self, creditor_address):
        """Sets the creditor_address of this PaymentInitiationJson.


        :param creditor_address: The creditor_address of this PaymentInitiationJson.  # noqa: E501
        :type: Address
        """

        self._creditor_address = creditor_address

    @property
    def remittance_information_unstructured(self):
        """Gets the remittance_information_unstructured of this PaymentInitiationJson.  # noqa: E501


        :return: The remittance_information_unstructured of this PaymentInitiationJson.  # noqa: E501
        :rtype: RemittanceInformationUnstructured
        """
        return self._remittance_information_unstructured

    @remittance_information_unstructured.setter
    def remittance_information_unstructured(self, remittance_information_unstructured):
        """Sets the remittance_information_unstructured of this PaymentInitiationJson.


        :param remittance_information_unstructured: The remittance_information_unstructured of this PaymentInitiationJson.  # noqa: E501
        :type: RemittanceInformationUnstructured
        """

        self._remittance_information_unstructured = remittance_information_unstructured

    @property
    def requested_execution_date(self):
        """Gets the requested_execution_date of this PaymentInitiationJson.  # noqa: E501

        Date when payment is scheduled to be executed in ISO-Date Format, e.g. 2020-10-30  # noqa: E501

        :return: The requested_execution_date of this PaymentInitiationJson.  # noqa: E501
        :rtype: str
        """
        return self._requested_execution_date

    @requested_execution_date.setter
    def requested_execution_date(self, requested_execution_date):
        """Sets the requested_execution_date of this PaymentInitiationJson.

        Date when payment is scheduled to be executed in ISO-Date Format, e.g. 2020-10-30  # noqa: E501

        :param requested_execution_date: The requested_execution_date of this PaymentInitiationJson.  # noqa: E501
        :type: str
        """

        self._requested_execution_date = requested_execution_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentInitiationJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentInitiationJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
