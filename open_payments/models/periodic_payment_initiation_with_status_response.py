# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PeriodicPaymentInitiationWithStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_to_end_identification': 'str',
        'debtor_account': 'AccountReference',
        'instructed_amount': 'Amount',
        'creditor_account': 'AccountReference',
        'creditor_agent': 'Bicfi',
        'creditor_name': 'CreditorName',
        'creditor_address': 'Address',
        'remittance_information_unstructured': 'RemittanceInformationUnstructured',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'execution_rule': 'ExecutionRule',
        'frequency': 'FrequencyCode',
        'day_of_execution': 'DayOfExecution',
        'transaction_status': 'TransactionStatus',
        'tpp_messages': 'list[TppMessage2XX]'
    }

    attribute_map = {
        'end_to_end_identification': 'endToEndIdentification',
        'debtor_account': 'debtorAccount',
        'instructed_amount': 'instructedAmount',
        'creditor_account': 'creditorAccount',
        'creditor_agent': 'creditorAgent',
        'creditor_name': 'creditorName',
        'creditor_address': 'creditorAddress',
        'remittance_information_unstructured': 'remittanceInformationUnstructured',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'execution_rule': 'executionRule',
        'frequency': 'frequency',
        'day_of_execution': 'dayOfExecution',
        'transaction_status': 'transactionStatus',
        'tpp_messages': 'tppMessages'
    }

    def __init__(self, end_to_end_identification=None, debtor_account=None, instructed_amount=None, creditor_account=None, creditor_agent=None, creditor_name=None, creditor_address=None, remittance_information_unstructured=None, start_date=None, end_date=None, execution_rule=None, frequency=None, day_of_execution=None, transaction_status=None, tpp_messages=None):  # noqa: E501
        """PeriodicPaymentInitiationWithStatusResponse - a model defined in Swagger"""  # noqa: E501
        self._end_to_end_identification = None
        self._debtor_account = None
        self._instructed_amount = None
        self._creditor_account = None
        self._creditor_agent = None
        self._creditor_name = None
        self._creditor_address = None
        self._remittance_information_unstructured = None
        self._start_date = None
        self._end_date = None
        self._execution_rule = None
        self._frequency = None
        self._day_of_execution = None
        self._transaction_status = None
        self._tpp_messages = None
        self.discriminator = None
        if end_to_end_identification is not None:
            self.end_to_end_identification = end_to_end_identification
        self.debtor_account = debtor_account
        self.instructed_amount = instructed_amount
        self.creditor_account = creditor_account
        if creditor_agent is not None:
            self.creditor_agent = creditor_agent
        self.creditor_name = creditor_name
        if creditor_address is not None:
            self.creditor_address = creditor_address
        if remittance_information_unstructured is not None:
            self.remittance_information_unstructured = remittance_information_unstructured
        self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if execution_rule is not None:
            self.execution_rule = execution_rule
        self.frequency = frequency
        if day_of_execution is not None:
            self.day_of_execution = day_of_execution
        if transaction_status is not None:
            self.transaction_status = transaction_status
        if tpp_messages is not None:
            self.tpp_messages = tpp_messages

    @property
    def end_to_end_identification(self):
        """Gets the end_to_end_identification of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The end_to_end_identification of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._end_to_end_identification

    @end_to_end_identification.setter
    def end_to_end_identification(self, end_to_end_identification):
        """Sets the end_to_end_identification of this PeriodicPaymentInitiationWithStatusResponse.


        :param end_to_end_identification: The end_to_end_identification of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: str
        """

        self._end_to_end_identification = end_to_end_identification

    @property
    def debtor_account(self):
        """Gets the debtor_account of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The debtor_account of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: AccountReference
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this PeriodicPaymentInitiationWithStatusResponse.


        :param debtor_account: The debtor_account of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: AccountReference
        """
        if debtor_account is None:
            raise ValueError("Invalid value for `debtor_account`, must not be `None`")  # noqa: E501

        self._debtor_account = debtor_account

    @property
    def instructed_amount(self):
        """Gets the instructed_amount of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The instructed_amount of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: Amount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount):
        """Sets the instructed_amount of this PeriodicPaymentInitiationWithStatusResponse.


        :param instructed_amount: The instructed_amount of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: Amount
        """
        if instructed_amount is None:
            raise ValueError("Invalid value for `instructed_amount`, must not be `None`")  # noqa: E501

        self._instructed_amount = instructed_amount

    @property
    def creditor_account(self):
        """Gets the creditor_account of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The creditor_account of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: AccountReference
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this PeriodicPaymentInitiationWithStatusResponse.


        :param creditor_account: The creditor_account of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: AccountReference
        """
        if creditor_account is None:
            raise ValueError("Invalid value for `creditor_account`, must not be `None`")  # noqa: E501

        self._creditor_account = creditor_account

    @property
    def creditor_agent(self):
        """Gets the creditor_agent of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The creditor_agent of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: Bicfi
        """
        return self._creditor_agent

    @creditor_agent.setter
    def creditor_agent(self, creditor_agent):
        """Sets the creditor_agent of this PeriodicPaymentInitiationWithStatusResponse.


        :param creditor_agent: The creditor_agent of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: Bicfi
        """

        self._creditor_agent = creditor_agent

    @property
    def creditor_name(self):
        """Gets the creditor_name of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The creditor_name of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: CreditorName
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name):
        """Sets the creditor_name of this PeriodicPaymentInitiationWithStatusResponse.


        :param creditor_name: The creditor_name of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: CreditorName
        """
        if creditor_name is None:
            raise ValueError("Invalid value for `creditor_name`, must not be `None`")  # noqa: E501

        self._creditor_name = creditor_name

    @property
    def creditor_address(self):
        """Gets the creditor_address of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The creditor_address of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: Address
        """
        return self._creditor_address

    @creditor_address.setter
    def creditor_address(self, creditor_address):
        """Sets the creditor_address of this PeriodicPaymentInitiationWithStatusResponse.


        :param creditor_address: The creditor_address of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: Address
        """

        self._creditor_address = creditor_address

    @property
    def remittance_information_unstructured(self):
        """Gets the remittance_information_unstructured of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The remittance_information_unstructured of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: RemittanceInformationUnstructured
        """
        return self._remittance_information_unstructured

    @remittance_information_unstructured.setter
    def remittance_information_unstructured(self, remittance_information_unstructured):
        """Sets the remittance_information_unstructured of this PeriodicPaymentInitiationWithStatusResponse.


        :param remittance_information_unstructured: The remittance_information_unstructured of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: RemittanceInformationUnstructured
        """

        self._remittance_information_unstructured = remittance_information_unstructured

    @property
    def start_date(self):
        """Gets the start_date of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The start_date of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: StartDate
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PeriodicPaymentInitiationWithStatusResponse.


        :param start_date: The start_date of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: StartDate
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The end_date of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: EndDate
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PeriodicPaymentInitiationWithStatusResponse.


        :param end_date: The end_date of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: EndDate
        """

        self._end_date = end_date

    @property
    def execution_rule(self):
        """Gets the execution_rule of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The execution_rule of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: ExecutionRule
        """
        return self._execution_rule

    @execution_rule.setter
    def execution_rule(self, execution_rule):
        """Sets the execution_rule of this PeriodicPaymentInitiationWithStatusResponse.


        :param execution_rule: The execution_rule of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: ExecutionRule
        """

        self._execution_rule = execution_rule

    @property
    def frequency(self):
        """Gets the frequency of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The frequency of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: FrequencyCode
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this PeriodicPaymentInitiationWithStatusResponse.


        :param frequency: The frequency of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: FrequencyCode
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")  # noqa: E501

        self._frequency = frequency

    @property
    def day_of_execution(self):
        """Gets the day_of_execution of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The day_of_execution of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: DayOfExecution
        """
        return self._day_of_execution

    @day_of_execution.setter
    def day_of_execution(self, day_of_execution):
        """Sets the day_of_execution of this PeriodicPaymentInitiationWithStatusResponse.


        :param day_of_execution: The day_of_execution of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: DayOfExecution
        """

        self._day_of_execution = day_of_execution

    @property
    def transaction_status(self):
        """Gets the transaction_status of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The transaction_status of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: TransactionStatus
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this PeriodicPaymentInitiationWithStatusResponse.


        :param transaction_status: The transaction_status of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: TransactionStatus
        """

        self._transaction_status = transaction_status

    @property
    def tpp_messages(self):
        """Gets the tpp_messages of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501


        :return: The tpp_messages of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :rtype: list[TppMessage2XX]
        """
        return self._tpp_messages

    @tpp_messages.setter
    def tpp_messages(self, tpp_messages):
        """Sets the tpp_messages of this PeriodicPaymentInitiationWithStatusResponse.


        :param tpp_messages: The tpp_messages of this PeriodicPaymentInitiationWithStatusResponse.  # noqa: E501
        :type: list[TppMessage2XX]
        """

        self._tpp_messages = tpp_messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PeriodicPaymentInitiationWithStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeriodicPaymentInitiationWithStatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
