# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SigningBasketResponse201(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_status': 'TransactionStatusSBS',
        'basket_id': 'BasketId',
        'sca_methods': 'ScaMethods',
        'chosen_sca_method': 'AuthenticationObject',
        'challenge_data': 'ChallengeData',
        'links': 'LinksSigningBasket',
        'psu_message': 'PsuMessageText',
        'tpp_messages': 'list[TppMessage2XX]'
    }

    attribute_map = {
        'transaction_status': 'transactionStatus',
        'basket_id': 'basketId',
        'sca_methods': 'scaMethods',
        'chosen_sca_method': 'chosenScaMethod',
        'challenge_data': 'challengeData',
        'links': '_links',
        'psu_message': 'psuMessage',
        'tpp_messages': 'tppMessages'
    }

    def __init__(self, transaction_status=None, basket_id=None, sca_methods=None, chosen_sca_method=None, challenge_data=None, links=None, psu_message=None, tpp_messages=None):  # noqa: E501
        """SigningBasketResponse201 - a model defined in Swagger"""  # noqa: E501
        self._transaction_status = None
        self._basket_id = None
        self._sca_methods = None
        self._chosen_sca_method = None
        self._challenge_data = None
        self._links = None
        self._psu_message = None
        self._tpp_messages = None
        self.discriminator = None
        self.transaction_status = transaction_status
        self.basket_id = basket_id
        if sca_methods is not None:
            self.sca_methods = sca_methods
        if chosen_sca_method is not None:
            self.chosen_sca_method = chosen_sca_method
        if challenge_data is not None:
            self.challenge_data = challenge_data
        self.links = links
        if psu_message is not None:
            self.psu_message = psu_message
        if tpp_messages is not None:
            self.tpp_messages = tpp_messages

    @property
    def transaction_status(self):
        """Gets the transaction_status of this SigningBasketResponse201.  # noqa: E501


        :return: The transaction_status of this SigningBasketResponse201.  # noqa: E501
        :rtype: TransactionStatusSBS
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this SigningBasketResponse201.


        :param transaction_status: The transaction_status of this SigningBasketResponse201.  # noqa: E501
        :type: TransactionStatusSBS
        """
        if transaction_status is None:
            raise ValueError("Invalid value for `transaction_status`, must not be `None`")  # noqa: E501

        self._transaction_status = transaction_status

    @property
    def basket_id(self):
        """Gets the basket_id of this SigningBasketResponse201.  # noqa: E501


        :return: The basket_id of this SigningBasketResponse201.  # noqa: E501
        :rtype: BasketId
        """
        return self._basket_id

    @basket_id.setter
    def basket_id(self, basket_id):
        """Sets the basket_id of this SigningBasketResponse201.


        :param basket_id: The basket_id of this SigningBasketResponse201.  # noqa: E501
        :type: BasketId
        """
        if basket_id is None:
            raise ValueError("Invalid value for `basket_id`, must not be `None`")  # noqa: E501

        self._basket_id = basket_id

    @property
    def sca_methods(self):
        """Gets the sca_methods of this SigningBasketResponse201.  # noqa: E501


        :return: The sca_methods of this SigningBasketResponse201.  # noqa: E501
        :rtype: ScaMethods
        """
        return self._sca_methods

    @sca_methods.setter
    def sca_methods(self, sca_methods):
        """Sets the sca_methods of this SigningBasketResponse201.


        :param sca_methods: The sca_methods of this SigningBasketResponse201.  # noqa: E501
        :type: ScaMethods
        """

        self._sca_methods = sca_methods

    @property
    def chosen_sca_method(self):
        """Gets the chosen_sca_method of this SigningBasketResponse201.  # noqa: E501


        :return: The chosen_sca_method of this SigningBasketResponse201.  # noqa: E501
        :rtype: AuthenticationObject
        """
        return self._chosen_sca_method

    @chosen_sca_method.setter
    def chosen_sca_method(self, chosen_sca_method):
        """Sets the chosen_sca_method of this SigningBasketResponse201.


        :param chosen_sca_method: The chosen_sca_method of this SigningBasketResponse201.  # noqa: E501
        :type: AuthenticationObject
        """

        self._chosen_sca_method = chosen_sca_method

    @property
    def challenge_data(self):
        """Gets the challenge_data of this SigningBasketResponse201.  # noqa: E501


        :return: The challenge_data of this SigningBasketResponse201.  # noqa: E501
        :rtype: ChallengeData
        """
        return self._challenge_data

    @challenge_data.setter
    def challenge_data(self, challenge_data):
        """Sets the challenge_data of this SigningBasketResponse201.


        :param challenge_data: The challenge_data of this SigningBasketResponse201.  # noqa: E501
        :type: ChallengeData
        """

        self._challenge_data = challenge_data

    @property
    def links(self):
        """Gets the links of this SigningBasketResponse201.  # noqa: E501


        :return: The links of this SigningBasketResponse201.  # noqa: E501
        :rtype: LinksSigningBasket
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SigningBasketResponse201.


        :param links: The links of this SigningBasketResponse201.  # noqa: E501
        :type: LinksSigningBasket
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def psu_message(self):
        """Gets the psu_message of this SigningBasketResponse201.  # noqa: E501


        :return: The psu_message of this SigningBasketResponse201.  # noqa: E501
        :rtype: PsuMessageText
        """
        return self._psu_message

    @psu_message.setter
    def psu_message(self, psu_message):
        """Sets the psu_message of this SigningBasketResponse201.


        :param psu_message: The psu_message of this SigningBasketResponse201.  # noqa: E501
        :type: PsuMessageText
        """

        self._psu_message = psu_message

    @property
    def tpp_messages(self):
        """Gets the tpp_messages of this SigningBasketResponse201.  # noqa: E501


        :return: The tpp_messages of this SigningBasketResponse201.  # noqa: E501
        :rtype: list[TppMessage2XX]
        """
        return self._tpp_messages

    @tpp_messages.setter
    def tpp_messages(self, tpp_messages):
        """Sets the tpp_messages of this SigningBasketResponse201.


        :param tpp_messages: The tpp_messages of this SigningBasketResponse201.  # noqa: E501
        :type: list[TppMessage2XX]
        """

        self._tpp_messages = tpp_messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SigningBasketResponse201, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SigningBasketResponse201):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
