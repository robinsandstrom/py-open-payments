# coding: utf-8

"""
    NextGenPSD2 XS2A Framework

    # Summary **Open Payments Europe NextGenPSD2 API** definition is based on The Berlin Group NextGenPSD2 Framework with some additional services like the ASPSP Information Services. The **NextGenPSD2** *Framework Version 1.3.3* offers a modern, open, harmonised and interoperable set of  Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.  The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service')  by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not an replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which need these field, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mention in the Implementation Guidelines.**   Therefore the implementer might add the in his own realisation of a PSD2 comlient API in addition to the elements define in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 1.3.3
    Contact: info@openpayments.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransactionDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_id': 'str',
        'entry_reference': 'str',
        'end_to_end_id': 'str',
        'mandate_id': 'str',
        'check_id': 'str',
        'creditor_id': 'str',
        'booking_date': 'BookingDate',
        'value_date': 'date',
        'transaction_amount': 'Amount',
        'currency_exchange': 'ReportExchangeRateList',
        'creditor_name': 'CreditorName',
        'creditor_account': 'TrnsCreditorAccountReference',
        'ultimate_creditor': 'UltimateCreditor',
        'debtor_name': 'DebtorName',
        'debtor_account': 'AccountReference',
        'ultimate_debtor': 'UltimateDebtor',
        'remittance_information_unstructured': 'RemittanceInformationUnstructured',
        'remittance_information_structured': 'str',
        'additional_information': 'str',
        'purpose_code': 'PurposeCode',
        'bank_transaction_code': 'BankTransactionCode',
        'proprietary_bank_transaction_code': 'ProprietaryBankTransactionCode',
        'transaction_list_id': 'TransactionListId',
        'links': 'LinksTransactionDetails'
    }

    attribute_map = {
        'transaction_id': 'transactionId',
        'entry_reference': 'entryReference',
        'end_to_end_id': 'endToEndId',
        'mandate_id': 'mandateId',
        'check_id': 'checkId',
        'creditor_id': 'creditorId',
        'booking_date': 'bookingDate',
        'value_date': 'valueDate',
        'transaction_amount': 'transactionAmount',
        'currency_exchange': 'currencyExchange',
        'creditor_name': 'creditorName',
        'creditor_account': 'creditorAccount',
        'ultimate_creditor': 'ultimateCreditor',
        'debtor_name': 'debtorName',
        'debtor_account': 'debtorAccount',
        'ultimate_debtor': 'ultimateDebtor',
        'remittance_information_unstructured': 'remittanceInformationUnstructured',
        'remittance_information_structured': 'remittanceInformationStructured',
        'additional_information': 'additionalInformation',
        'purpose_code': 'purposeCode',
        'bank_transaction_code': 'bankTransactionCode',
        'proprietary_bank_transaction_code': 'proprietaryBankTransactionCode',
        'transaction_list_id': 'transactionListId',
        'links': '_links'
    }

    def __init__(self, transaction_id=None, entry_reference=None, end_to_end_id=None, mandate_id=None, check_id=None, creditor_id=None, booking_date=None, value_date=None, transaction_amount=None, currency_exchange=None, creditor_name=None, creditor_account=None, ultimate_creditor=None, debtor_name=None, debtor_account=None, ultimate_debtor=None, remittance_information_unstructured=None, remittance_information_structured=None, additional_information=None, purpose_code=None, bank_transaction_code=None, proprietary_bank_transaction_code=None, transaction_list_id=None, links=None):  # noqa: E501
        """TransactionDetails - a model defined in Swagger"""  # noqa: E501
        self._transaction_id = None
        self._entry_reference = None
        self._end_to_end_id = None
        self._mandate_id = None
        self._check_id = None
        self._creditor_id = None
        self._booking_date = None
        self._value_date = None
        self._transaction_amount = None
        self._currency_exchange = None
        self._creditor_name = None
        self._creditor_account = None
        self._ultimate_creditor = None
        self._debtor_name = None
        self._debtor_account = None
        self._ultimate_debtor = None
        self._remittance_information_unstructured = None
        self._remittance_information_structured = None
        self._additional_information = None
        self._purpose_code = None
        self._bank_transaction_code = None
        self._proprietary_bank_transaction_code = None
        self._transaction_list_id = None
        self._links = None
        self.discriminator = None
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if entry_reference is not None:
            self.entry_reference = entry_reference
        if end_to_end_id is not None:
            self.end_to_end_id = end_to_end_id
        if mandate_id is not None:
            self.mandate_id = mandate_id
        if check_id is not None:
            self.check_id = check_id
        if creditor_id is not None:
            self.creditor_id = creditor_id
        if booking_date is not None:
            self.booking_date = booking_date
        if value_date is not None:
            self.value_date = value_date
        self.transaction_amount = transaction_amount
        if currency_exchange is not None:
            self.currency_exchange = currency_exchange
        if creditor_name is not None:
            self.creditor_name = creditor_name
        if creditor_account is not None:
            self.creditor_account = creditor_account
        if ultimate_creditor is not None:
            self.ultimate_creditor = ultimate_creditor
        if debtor_name is not None:
            self.debtor_name = debtor_name
        if debtor_account is not None:
            self.debtor_account = debtor_account
        if ultimate_debtor is not None:
            self.ultimate_debtor = ultimate_debtor
        if remittance_information_unstructured is not None:
            self.remittance_information_unstructured = remittance_information_unstructured
        if remittance_information_structured is not None:
            self.remittance_information_structured = remittance_information_structured
        if additional_information is not None:
            self.additional_information = additional_information
        if purpose_code is not None:
            self.purpose_code = purpose_code
        if bank_transaction_code is not None:
            self.bank_transaction_code = bank_transaction_code
        if proprietary_bank_transaction_code is not None:
            self.proprietary_bank_transaction_code = proprietary_bank_transaction_code
        if transaction_list_id is not None:
            self.transaction_list_id = transaction_list_id
        if links is not None:
            self.links = links

    @property
    def transaction_id(self):
        """Gets the transaction_id of this TransactionDetails.  # noqa: E501

        the Transaction Id can be used as access-ID in the API, where more details on an transaction is offered.  If this data attribute is provided this shows that the AIS can get access on more details about this  transaction using the GET Transaction Details Request    # noqa: E501

        :return: The transaction_id of this TransactionDetails.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this TransactionDetails.

        the Transaction Id can be used as access-ID in the API, where more details on an transaction is offered.  If this data attribute is provided this shows that the AIS can get access on more details about this  transaction using the GET Transaction Details Request    # noqa: E501

        :param transaction_id: The transaction_id of this TransactionDetails.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def entry_reference(self):
        """Gets the entry_reference of this TransactionDetails.  # noqa: E501

        Is the identification of the transaction as used e.g. for reference for deltafunction on application level.  The same identification as for example used within camt.05x messages.   # noqa: E501

        :return: The entry_reference of this TransactionDetails.  # noqa: E501
        :rtype: str
        """
        return self._entry_reference

    @entry_reference.setter
    def entry_reference(self, entry_reference):
        """Sets the entry_reference of this TransactionDetails.

        Is the identification of the transaction as used e.g. for reference for deltafunction on application level.  The same identification as for example used within camt.05x messages.   # noqa: E501

        :param entry_reference: The entry_reference of this TransactionDetails.  # noqa: E501
        :type: str
        """

        self._entry_reference = entry_reference

    @property
    def end_to_end_id(self):
        """Gets the end_to_end_id of this TransactionDetails.  # noqa: E501

        Unique end to end identity.  # noqa: E501

        :return: The end_to_end_id of this TransactionDetails.  # noqa: E501
        :rtype: str
        """
        return self._end_to_end_id

    @end_to_end_id.setter
    def end_to_end_id(self, end_to_end_id):
        """Sets the end_to_end_id of this TransactionDetails.

        Unique end to end identity.  # noqa: E501

        :param end_to_end_id: The end_to_end_id of this TransactionDetails.  # noqa: E501
        :type: str
        """

        self._end_to_end_id = end_to_end_id

    @property
    def mandate_id(self):
        """Gets the mandate_id of this TransactionDetails.  # noqa: E501

        Identification of Mandates, e.g. a SEPA Mandate ID.  # noqa: E501

        :return: The mandate_id of this TransactionDetails.  # noqa: E501
        :rtype: str
        """
        return self._mandate_id

    @mandate_id.setter
    def mandate_id(self, mandate_id):
        """Sets the mandate_id of this TransactionDetails.

        Identification of Mandates, e.g. a SEPA Mandate ID.  # noqa: E501

        :param mandate_id: The mandate_id of this TransactionDetails.  # noqa: E501
        :type: str
        """

        self._mandate_id = mandate_id

    @property
    def check_id(self):
        """Gets the check_id of this TransactionDetails.  # noqa: E501

        Identification of a Cheque.  # noqa: E501

        :return: The check_id of this TransactionDetails.  # noqa: E501
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this TransactionDetails.

        Identification of a Cheque.  # noqa: E501

        :param check_id: The check_id of this TransactionDetails.  # noqa: E501
        :type: str
        """

        self._check_id = check_id

    @property
    def creditor_id(self):
        """Gets the creditor_id of this TransactionDetails.  # noqa: E501

        Identification of Creditors, e.g. a SEPA Creditor ID.  # noqa: E501

        :return: The creditor_id of this TransactionDetails.  # noqa: E501
        :rtype: str
        """
        return self._creditor_id

    @creditor_id.setter
    def creditor_id(self, creditor_id):
        """Sets the creditor_id of this TransactionDetails.

        Identification of Creditors, e.g. a SEPA Creditor ID.  # noqa: E501

        :param creditor_id: The creditor_id of this TransactionDetails.  # noqa: E501
        :type: str
        """

        self._creditor_id = creditor_id

    @property
    def booking_date(self):
        """Gets the booking_date of this TransactionDetails.  # noqa: E501


        :return: The booking_date of this TransactionDetails.  # noqa: E501
        :rtype: BookingDate
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this TransactionDetails.


        :param booking_date: The booking_date of this TransactionDetails.  # noqa: E501
        :type: BookingDate
        """

        self._booking_date = booking_date

    @property
    def value_date(self):
        """Gets the value_date of this TransactionDetails.  # noqa: E501

        The Date at which assets become available to the account owner in case of a credit.  # noqa: E501

        :return: The value_date of this TransactionDetails.  # noqa: E501
        :rtype: date
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """Sets the value_date of this TransactionDetails.

        The Date at which assets become available to the account owner in case of a credit.  # noqa: E501

        :param value_date: The value_date of this TransactionDetails.  # noqa: E501
        :type: date
        """

        self._value_date = value_date

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this TransactionDetails.  # noqa: E501


        :return: The transaction_amount of this TransactionDetails.  # noqa: E501
        :rtype: Amount
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this TransactionDetails.


        :param transaction_amount: The transaction_amount of this TransactionDetails.  # noqa: E501
        :type: Amount
        """
        if transaction_amount is None:
            raise ValueError("Invalid value for `transaction_amount`, must not be `None`")  # noqa: E501

        self._transaction_amount = transaction_amount

    @property
    def currency_exchange(self):
        """Gets the currency_exchange of this TransactionDetails.  # noqa: E501


        :return: The currency_exchange of this TransactionDetails.  # noqa: E501
        :rtype: ReportExchangeRateList
        """
        return self._currency_exchange

    @currency_exchange.setter
    def currency_exchange(self, currency_exchange):
        """Sets the currency_exchange of this TransactionDetails.


        :param currency_exchange: The currency_exchange of this TransactionDetails.  # noqa: E501
        :type: ReportExchangeRateList
        """

        self._currency_exchange = currency_exchange

    @property
    def creditor_name(self):
        """Gets the creditor_name of this TransactionDetails.  # noqa: E501


        :return: The creditor_name of this TransactionDetails.  # noqa: E501
        :rtype: CreditorName
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name):
        """Sets the creditor_name of this TransactionDetails.


        :param creditor_name: The creditor_name of this TransactionDetails.  # noqa: E501
        :type: CreditorName
        """

        self._creditor_name = creditor_name

    @property
    def creditor_account(self):
        """Gets the creditor_account of this TransactionDetails.  # noqa: E501


        :return: The creditor_account of this TransactionDetails.  # noqa: E501
        :rtype: TrnsCreditorAccountReference
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this TransactionDetails.


        :param creditor_account: The creditor_account of this TransactionDetails.  # noqa: E501
        :type: TrnsCreditorAccountReference
        """

        self._creditor_account = creditor_account

    @property
    def ultimate_creditor(self):
        """Gets the ultimate_creditor of this TransactionDetails.  # noqa: E501


        :return: The ultimate_creditor of this TransactionDetails.  # noqa: E501
        :rtype: UltimateCreditor
        """
        return self._ultimate_creditor

    @ultimate_creditor.setter
    def ultimate_creditor(self, ultimate_creditor):
        """Sets the ultimate_creditor of this TransactionDetails.


        :param ultimate_creditor: The ultimate_creditor of this TransactionDetails.  # noqa: E501
        :type: UltimateCreditor
        """

        self._ultimate_creditor = ultimate_creditor

    @property
    def debtor_name(self):
        """Gets the debtor_name of this TransactionDetails.  # noqa: E501


        :return: The debtor_name of this TransactionDetails.  # noqa: E501
        :rtype: DebtorName
        """
        return self._debtor_name

    @debtor_name.setter
    def debtor_name(self, debtor_name):
        """Sets the debtor_name of this TransactionDetails.


        :param debtor_name: The debtor_name of this TransactionDetails.  # noqa: E501
        :type: DebtorName
        """

        self._debtor_name = debtor_name

    @property
    def debtor_account(self):
        """Gets the debtor_account of this TransactionDetails.  # noqa: E501


        :return: The debtor_account of this TransactionDetails.  # noqa: E501
        :rtype: AccountReference
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this TransactionDetails.


        :param debtor_account: The debtor_account of this TransactionDetails.  # noqa: E501
        :type: AccountReference
        """

        self._debtor_account = debtor_account

    @property
    def ultimate_debtor(self):
        """Gets the ultimate_debtor of this TransactionDetails.  # noqa: E501


        :return: The ultimate_debtor of this TransactionDetails.  # noqa: E501
        :rtype: UltimateDebtor
        """
        return self._ultimate_debtor

    @ultimate_debtor.setter
    def ultimate_debtor(self, ultimate_debtor):
        """Sets the ultimate_debtor of this TransactionDetails.


        :param ultimate_debtor: The ultimate_debtor of this TransactionDetails.  # noqa: E501
        :type: UltimateDebtor
        """

        self._ultimate_debtor = ultimate_debtor

    @property
    def remittance_information_unstructured(self):
        """Gets the remittance_information_unstructured of this TransactionDetails.  # noqa: E501


        :return: The remittance_information_unstructured of this TransactionDetails.  # noqa: E501
        :rtype: RemittanceInformationUnstructured
        """
        return self._remittance_information_unstructured

    @remittance_information_unstructured.setter
    def remittance_information_unstructured(self, remittance_information_unstructured):
        """Sets the remittance_information_unstructured of this TransactionDetails.


        :param remittance_information_unstructured: The remittance_information_unstructured of this TransactionDetails.  # noqa: E501
        :type: RemittanceInformationUnstructured
        """

        self._remittance_information_unstructured = remittance_information_unstructured

    @property
    def remittance_information_structured(self):
        """Gets the remittance_information_structured of this TransactionDetails.  # noqa: E501

        Reference as contained in the structured remittance reference structure (without the surrounding XML structure).  Different from other places the content is containt in plain form not in form of a structered field.   # noqa: E501

        :return: The remittance_information_structured of this TransactionDetails.  # noqa: E501
        :rtype: str
        """
        return self._remittance_information_structured

    @remittance_information_structured.setter
    def remittance_information_structured(self, remittance_information_structured):
        """Sets the remittance_information_structured of this TransactionDetails.

        Reference as contained in the structured remittance reference structure (without the surrounding XML structure).  Different from other places the content is containt in plain form not in form of a structered field.   # noqa: E501

        :param remittance_information_structured: The remittance_information_structured of this TransactionDetails.  # noqa: E501
        :type: str
        """

        self._remittance_information_structured = remittance_information_structured

    @property
    def additional_information(self):
        """Gets the additional_information of this TransactionDetails.  # noqa: E501

        Might be used by the ASPSP to transport additional transaction related information to the PSU.   # noqa: E501

        :return: The additional_information of this TransactionDetails.  # noqa: E501
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this TransactionDetails.

        Might be used by the ASPSP to transport additional transaction related information to the PSU.   # noqa: E501

        :param additional_information: The additional_information of this TransactionDetails.  # noqa: E501
        :type: str
        """

        self._additional_information = additional_information

    @property
    def purpose_code(self):
        """Gets the purpose_code of this TransactionDetails.  # noqa: E501


        :return: The purpose_code of this TransactionDetails.  # noqa: E501
        :rtype: PurposeCode
        """
        return self._purpose_code

    @purpose_code.setter
    def purpose_code(self, purpose_code):
        """Sets the purpose_code of this TransactionDetails.


        :param purpose_code: The purpose_code of this TransactionDetails.  # noqa: E501
        :type: PurposeCode
        """

        self._purpose_code = purpose_code

    @property
    def bank_transaction_code(self):
        """Gets the bank_transaction_code of this TransactionDetails.  # noqa: E501


        :return: The bank_transaction_code of this TransactionDetails.  # noqa: E501
        :rtype: BankTransactionCode
        """
        return self._bank_transaction_code

    @bank_transaction_code.setter
    def bank_transaction_code(self, bank_transaction_code):
        """Sets the bank_transaction_code of this TransactionDetails.


        :param bank_transaction_code: The bank_transaction_code of this TransactionDetails.  # noqa: E501
        :type: BankTransactionCode
        """

        self._bank_transaction_code = bank_transaction_code

    @property
    def proprietary_bank_transaction_code(self):
        """Gets the proprietary_bank_transaction_code of this TransactionDetails.  # noqa: E501


        :return: The proprietary_bank_transaction_code of this TransactionDetails.  # noqa: E501
        :rtype: ProprietaryBankTransactionCode
        """
        return self._proprietary_bank_transaction_code

    @proprietary_bank_transaction_code.setter
    def proprietary_bank_transaction_code(self, proprietary_bank_transaction_code):
        """Sets the proprietary_bank_transaction_code of this TransactionDetails.


        :param proprietary_bank_transaction_code: The proprietary_bank_transaction_code of this TransactionDetails.  # noqa: E501
        :type: ProprietaryBankTransactionCode
        """

        self._proprietary_bank_transaction_code = proprietary_bank_transaction_code

    @property
    def transaction_list_id(self):
        """Gets the transaction_list_id of this TransactionDetails.  # noqa: E501


        :return: The transaction_list_id of this TransactionDetails.  # noqa: E501
        :rtype: TransactionListId
        """
        return self._transaction_list_id

    @transaction_list_id.setter
    def transaction_list_id(self, transaction_list_id):
        """Sets the transaction_list_id of this TransactionDetails.


        :param transaction_list_id: The transaction_list_id of this TransactionDetails.  # noqa: E501
        :type: TransactionListId
        """

        self._transaction_list_id = transaction_list_id

    @property
    def links(self):
        """Gets the links of this TransactionDetails.  # noqa: E501


        :return: The links of this TransactionDetails.  # noqa: E501
        :rtype: LinksTransactionDetails
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TransactionDetails.


        :param links: The links of this TransactionDetails.  # noqa: E501
        :type: LinksTransactionDetails
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
